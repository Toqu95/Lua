<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Alternet.Syntax.Parsers.Advanced.Python.v7</name>
    </assembly>
    <members>
        <member name="T:Alternet.Syntax.Parsers.Python.CodeCompletion.PythonListMember">
            <summary>
            Implements properties and methods for a particular list member in the data collection of the code completion popups used to describe C# language code.
            </summary>
        </member>
        <member name="P:Alternet.Syntax.Parsers.Python.CodeCompletion.PythonListMember.Description">
            <inheritdoc/>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Python.CodeCompletion.PythonListMember.GetParamText(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Alternet.Syntax.Parsers.Python.CodeCompletion.PythonListMembers">
            <summary>
            Represents data collection related to popup list box controls used to describe C# language code.
            </summary>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Python.CodeCompletion.PythonListMembers.CreateListMember">
            <summary>
            Initializes a new instance of the <c>CsListMember</c> class with default settings.
            </summary>
            <returns><c>IListMember</c> that represents this new instance.</returns>
        </member>
        <member name="T:Alternet.Syntax.Parsers.Python.CodeCompletion.PythonParameterInfo">
            <summary>
            Represents Parameter Info data related to popup window and popup hint controls used to describe C# language code.
            </summary>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Python.CodeCompletion.PythonParameterInfo.CreateListMember">
            <summary>
            Initializes a new instance of the <c>PythonListMember</c> class with default settings.
            </summary>
            <returns><c>IListMember</c> that represents this new instance.</returns>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Python.CodeCompletion.PythonRepository.#ctor(Alternet.Syntax.ISyntaxParser,System.Boolean,Alternet.Syntax.ISyntaxTree)">
            <summary>
            Initializes a new instance of the <c>CsRepository</c> class with specified settings.
            </summary>
            <param name="caseSensitive">Specifies CaseSensitive property of this new instance.</param>
            <param name="syntaxTree">Specifies SyntaxTree property of this new instance.</param>
        </member>
        <member name="P:Alternet.Syntax.Parsers.Python.CodeCompletion.PythonRepository.Images">
            <summary>
            Represents collection of images used for code completion.
            </summary>
        </member>
        <member name="P:Alternet.Syntax.Parsers.Python.CodeCompletion.PythonRepository.ImagesHighDpi">
            <summary>
            Represents collection of images used for code completion for high DPI.
            </summary>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Python.CodeCompletion.PythonRepository.GetQuickInfo(Alternet.Syntax.Parsers.Python.SemanticModel.IPythonSymbol)">
            <summary>
            Returns information about the object.
            </summary>
            <param name="node">Given ISyntaxNode object.</param>
            <returns>IQuickInfo instance.</returns>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Python.CodeCompletion.IronPythonRepository.#ctor(Alternet.Syntax.ISyntaxParser,System.Boolean,Alternet.Syntax.ISyntaxTree)">
            <summary>
            Initializes a new instance of the <c>CsRepository</c> class with specified settings.
            </summary>
            <param name="caseSensitive">Specifies CaseSensitive property of this new instance.</param>
            <param name="syntaxTree">Specifies SyntaxTree property of this new instance.</param>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Python.IronPythonParser.#ctor">
            <summary>
            Initializes a new instance of the <c>IronPythonParser</c> class with default settings.
            </summary>
        </member>
        <member name="T:Alternet.Syntax.Parsers.Python.SemanticModel.DescriptionHelper">
            <summary>
            Provides methods to get member's description.
            </summary>
        </member>
        <member name="P:Alternet.Syntax.Parsers.Python.SemanticModel.DescriptionHelper.SystemAssemblyFolders">
            <summary>
            Represents directory information where system assembly stored.
            </summary>
        </member>
        <member name="P:Alternet.Syntax.Parsers.Python.SemanticModel.DescriptionHelper.CustomXMLDocPath">
            <summary>
            Gets a custom xml documentation path.
            </summary>
        </member>
        <member name="P:Alternet.Syntax.Parsers.Python.SemanticModel.DescriptionHelper.Enabled">
            <summary>
            Gets or sets a boolean value indicating whether <c>DescriptionHelper</c> should obtain descriptions from assemblies.
            </summary>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Python.SemanticModel.DescriptionHelper.LoadAssembly(System.Reflection.Assembly,System.IO.Stream)">
            <summary>
            Loads content of the specified assembly.
            </summary>
            <param name="assembly">Assembly to load.</param>
            <param name="stream">The location of the XML file.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Python.SemanticModel.DescriptionHelper.LoadAssembly(System.Reflection.Assembly)">
            <summary>
            Loads content of the specified assembly.
            </summary>
            <param name="assembly">Assembly to load.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Python.SemanticModel.DescriptionHelper.UnloadAssembly(System.Reflection.Assembly)">
            <summary>
            Removes the specified assembly from the assembly collection.
            </summary>
            <param name="assembly">Assembly to unload.</param>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Python.SemanticModel.DescriptionHelper.GetDescription(System.Reflection.ParameterInfo)">
            <summary>
            Obtains description of the specified ParameterInfo.
            </summary>
            <param name="pinfo">ParameterInfo to evaluate.</param>
            <returns>String that describes specified ParameterInfo.</returns>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Python.SemanticModel.DescriptionHelper.GetDescription(System.Reflection.MemberInfo)">
            <summary>
            Obtains description of the specified MemberInfo.
            </summary>
            <param name="info">MemberInfo to evaluate.</param>
            <returns>String that describes specified MemberInfo.</returns>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Python.SemanticModel.DescriptionHelper.GetPriority(System.Reflection.MemberInfo)">
            <summary>
            Obtains priority of the specified MemberInfo.
            </summary>
            <param name="info">MemberInfo to evaluate.</param>
            <returns>Integer value that specifies priority of given MemberInfo.</returns>
        </member>
        <member name="T:Alternet.Syntax.Parsers.Python.PythonLexerToken">
            <summary>
            Represents lexical tokens for Python parser.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.Unit">
            <summary>
            Specifies that syntax node corresponds to entire unit.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.UsingList">
            <summary>
            Specifies that syntax node corresponds to the list of external namespaces.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.Using">
            <summary>
            Specifies that syntax node corresponds to external namespace.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.UsingAlias">
            <summary>
            Specifies that syntax node corresponds to user-defined symbol representing a namespace.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.Namespace">
            <summary>
            Specifies that syntax node corresponds to namespace.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.Class">
            <summary>
            Specifies that syntax node corresponds to class.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.Struct">
            <summary>
            Specifies that syntax node corresponds to structure.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.Interface">
            <summary>
            Specifies that syntax node corresponds to interface.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.Field">
            <summary>
            Specifies that syntax node corresponds to field.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.LocalVariable">
            <summary>
            Specifies that syntax node corresponds to local variable.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.Method">
            <summary>
            Specifies that syntax node corresponds to method.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.Decorator">
            <summary>
            Specifies that syntax node corresponds to decorator.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.Parameter">
            <summary>
            Specifies that syntax node corresponds to parameter.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.ParameterList">
            <summary>
            Specifies that syntax node corresponds to list of parameters.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.LambdaExpression">
            <summary>
            Specifies that syntax node corresponds to "lambda" expression.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.LambdaParameter">
            <summary>
            Specifies that syntax node corresponds to "lambda" parameter.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.LambdaParameterList">
            <summary>
            Specifies that syntax node corresponds to "lambda" parameter list.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.Argument">
            <summary>
            Specifies that syntax node corresponds to method argument.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.ArgumentList">
            <summary>
            Specifies that syntax node corresponds to list of arguments.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.VariableInitializer">
            <summary>
            Specifies that syntax node corresponds to variable initializer.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.Identifier">
            <summary>
            Specifies that syntax node corresponds to identifier.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.Name">
            <summary>
            Specifies that syntax node corresponds to name (identifier).
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.Type">
            <summary>
            Specifies that syntax node corresponds to type.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.TypeList">
            <summary>
            Specifies that syntax node corresponds to list of types.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.TupleMembersList">
            <summary>
            Specifies that syntax node corresponds to Tuple member list.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.TupleMember">
            <summary>
            Specifies that syntax node corresponds to Tuple member.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.BaseType">
            <summary>
            Specifies that syntax node corresponds to base type.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.Modifier">
            <summary>
            Specifies that syntax node corresponds to access modifier.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.AssignmentStatement">
            <summary>
            Specifies that syntax node corresponds to "assignment" statement.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.IfStatement">
            <summary>
            Specifies that syntax node corresponds to "if" statement.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.ElseStatement">
            <summary>
            Specifies that syntax node corresponds to "else" statement.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.WhileStatement">
            <summary>
            Specifies that syntax node corresponds to "while" statement.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.ForStatement">
            <summary>
            Specifies that syntax node corresponds to "for" statement.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.ForConditionStatement">
            <summary>
            Specifies that syntax node corresponds to "for" condition statement.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.ForInitializerStatement">
            <summary>
            Specifies that syntax node corresponds to "for" initializer statement.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.AssertStatement">
            <summary>
            Specifies that syntax node corresponds to "assert" statement.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.BreakStatement">
            <summary>
            Specifies that syntax node corresponds to "break" statement.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.ContinueStatement">
            <summary>
            Specifies that syntax node corresponds to "continue" statement.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.ReturnStatement">
            <summary>
            Specifies that syntax node corresponds to "return" statement.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.TryStatement">
            <summary>
            Specifies that syntax node corresponds to "try" statement.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.CatchStatement">
            <summary>
            Specifies that syntax node corresponds to "catch" statement.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.FinallyStatement">
            <summary>
            Specifies that syntax node corresponds to "finally" statement.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.BlockStatement">
            <summary>
            Specifies that syntax node corresponds to "block" statement.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.ExpressionStatement">
            <summary>
            Specifies that syntax node corresponds to expression statement.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.PassStatement">
            <summary>
            Specifies that syntax node corresponds to "pass" statement.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.DelStatement">
            <summary>
            Specifies that syntax node corresponds to "del" statement.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.PrintStatement">
            <summary>
            Specifies that syntax node corresponds to "print" statement.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.YieldStatement">
            <summary>
            Specifies that syntax node corresponds to "yield" statement.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.RaiseStatement">
            <summary>
            Specifies that syntax node corresponds to "raise" statement.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.GlobalStatement">
            <summary>
            Specifies that syntax node corresponds to "global" statement.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.ExecStatement">
            <summary>
            Specifies that syntax node corresponds to "exec" statement.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.ElseIfStatement">
            <summary>
            Specifies that syntax node corresponds to "else if" statement.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.WithStatement">
            <summary>
            Specifies that syntax node corresponds to "with" statement.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.WithStatementMember">
            <summary>
            Specifies that syntax node corresponds to with member.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.Assignment">
            <summary>
            Specifies attribute for assignment expression.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.ExpressionList">
            <summary>
            Specifies that syntax node corresponds to expression list.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.Expression">
            <summary>
            Specifies that syntax node corresponds to expression.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.KeyDatumList">
            <summary>
            Specifies that syntax node corresponds to key datum expression list.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.KeyDatum">
            <summary>
            Specifies that syntax node corresponds to key datum expression.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.ConditionalExpression">
            <summary>
            Specifies that syntax node corresponds to "conditional" expression.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.AssignmentExpression">
            <summary>
            Specifies that syntax node corresponds to "assignment" expression.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.ConditionalOrExpression">
            <summary>
            Specifies that syntax node corresponds to "conditional or" expression.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.ConditionalAndExpression">
            <summary>
            Specifies that syntax node corresponds to "conditional and" expression.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.InclusiveOrExpression">
            <summary>
            Specifies that syntax node corresponds to "inclusive or" expression.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.ExclusiveOrExpression">
            <summary>
            Specifies that syntax node corresponds to "exclusive or" expression.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.AndExpression">
            <summary>
            Specifies that syntax node corresponds to "and" expression.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.NotExpression">
            <summary>
            Specifies that syntax node corresponds to "not" expression.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.EqualityExpression">
            <summary>
            Specifies that syntax node corresponds to "equality" expression.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.RelationalExpression">
            <summary>
            Specifies that syntax node corresponds to "relation" expression.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.AsIsExpression">
            <summary>
            Specifies that syntax node corresponds to "as is" expression.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.InExpression">
            <summary>
            Specifies that syntax node corresponds to "in" expression.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.ShiftExpression">
            <summary>
            Specifies that syntax node corresponds to "shift" expression.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.AdditiveExpression">
            <summary>
            Specifies that syntax node corresponds to "additive" expression.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.MultiplicativeExpression">
            <summary>
            Specifies that syntax node corresponds to "multiplicative" expression.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.PrefixedUnaryExpression">
            <summary>
            Specifies that syntax node corresponds to "prefixed unary" expression.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.PrimaryExpression">
            <summary>
            Specifies that syntax node corresponds to "primary" expression.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.AttributeRefExpression">
            <summary>
            Specifies that syntax node corresponds to "attribute reference" expression.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.SubscriptionExpression">
            <summary>
            Specifies that syntax node corresponds to "subscription" expression.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.SlicingExpression">
            <summary>
            Specifies that syntax node corresponds to "slicing" expression.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.SliceList">
            <summary>
            Specifies that syntax node corresponds to "slice" expression list.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.SliceExpression">
            <summary>
            Specifies that syntax node corresponds to "slice" expression.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.InvocationExpression">
            <summary>
            Specifies that syntax node corresponds to "invocation" expression.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.ParenthesizedExpression">
            <summary>
            Specifies that syntax node corresponds to "parenthesized" expression.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.ListDisplayExpression">
            <summary>
            Specifies that syntax node corresponds to "list display" expression.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.DictDisplayExpression">
            <summary>
            Specifies that syntax node corresponds to "dict display" expression.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.SetDisplayExpression">
            <summary>
            Specifies that syntax node corresponds to "set display" expression.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.StringConversionExpression">
            <summary>
            Specifies that syntax node corresponds to "string conversion" expression.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.YieldExpression">
            <summary>
            Specifies that syntax node corresponds to "yield" expression.
            </summary>
        </member>
        <member name="F:Alternet.Syntax.Parsers.Python.PythonNodeType.MemberAccessExpression">
            <summary>
            Specifies that syntax node corresponds to "member access" expression.
            </summary>
        </member>
        <member name="T:Alternet.Syntax.Parsers.Python.PythonParser">
            <summary>
            Represents class that and perform syntax and lexical analysis of specified Python code text.
            </summary>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Python.PythonParser.#ctor">
            <summary>
            Initializes a new instance of the <c>PythonParser</c> class with default settings.
            </summary>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Python.PythonParser.RestoreState(System.Boolean)">
            <summary>
            Restores <c>Parser</c> state and position stored by <c>SaveState</c> method.
            </summary>
            <param name="restore">Indicates whether <c>Parser</c> should restore it's state to previous position or simply delete information about previously stored state.</param>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Python.PythonParser.ResetOptions">
            <summary>
            Resets <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Python.PythonParser.ReparseBlock(System.Drawing.Point)">
            <summary>
            Reparses syntax block at specified position.
            </summary>
            <param name="position">Specifies position to find syntax block.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Python.PythonParser.ShouldSerializeOptions">
            <summary>
            Indicates whether the <c>Options</c> property should be persisted.
            </summary>
            <returns>True if <c>Options</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Python.PythonParser.GetCompletionType(System.Char)">
            <inheritdoc/>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Python.PythonParser.FindDeclaration(System.String,System.Drawing.Point)">
            <inheritdoc/>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Python.PythonParser.FindReferences(System.Drawing.Point)">
            <inheritdoc/>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Python.PythonParser.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Python.PythonParser.FindReferences(System.Drawing.Point,Alternet.Common.IRangeList,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Python.PythonParser.CodeCompletion(System.String,Alternet.Syntax.StringItemInfo[],System.Drawing.Point,Alternet.Syntax.CodeCompletionArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Python.PythonParser.CreateRepository">
            <inheritdoc/>
        </member>
        <member name="M:Alternet.Syntax.Parsers.Python.PythonParser.FindDeclaration(System.Drawing.Point)">
            <inheritdoc/>
        </member>
    </members>
</doc>
