<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Alternet.Common.v7</name>
    </assembly>
    <members>
        <member name="T:Alternet.Common.AlphaImageListHelper">
            <summary>
            Provides additional functionality for ImageList objects.
            </summary>
        </member>
        <member name="M:Alternet.Common.AlphaImageListHelper.LoadImageListFromStrip(System.Reflection.Assembly,System.String)">
            <summary>
            Creates an ImageList from specified resource.
            </summary>
            <param name="assembly">Assembly contains specified resource.</param>
            <param name="resourceName">Name of resource stores stripped image list.</param>
            <returns>System.Windows.Forms.ImageList contains images from resource.</returns>
        </member>
        <member name="M:Alternet.Common.AlphaImageListHelper.TryLoadImageListFromStrip(System.Reflection.Assembly,System.String)">
            <summary>
            Tries to create an ImageList from specified resource.
            </summary>
            <param name="assembly">Assembly contains specified resource.</param>
            <param name="resourceName">Name of resource stores stripped image list.</param>
            <returns>System.Windows.Forms.ImageList contains images from resource.</returns>
        </member>
        <member name="T:Alternet.Common.TechnologyEnvironment">
            <summary>
            Specifies platform to be used for code completion.
            </summary>
        </member>
        <member name="F:Alternet.Common.TechnologyEnvironment.System">
            <summary>
            No UI Platform is used.
            </summary>
        </member>
        <member name="F:Alternet.Common.TechnologyEnvironment.WindowsForms">
            <summary>
            Specifies Windows Forms platform.
            </summary>
        </member>
        <member name="F:Alternet.Common.TechnologyEnvironment.Wpf">
            <summary>
            Specifies WPF platform.
            </summary>
        </member>
        <member name="F:Alternet.Common.TechnologyEnvironment.WindowsFormsAndWpf">
            <summary>
            Specifies Windows Forms and WPF platforms.
            </summary>
        </member>
        <member name="T:Alternet.Common.TargetNETFrameworkVersion">
            <summary>
            Specifies version of the .NET Framework to be used for locating Framework assemblies.
            </summary>
        </member>
        <member name="F:Alternet.Common.TargetNETFrameworkVersion.Version45">
            <summary>
            Framework 4.5
            </summary>
        </member>
        <member name="F:Alternet.Common.TargetNETFrameworkVersion.VersionLatest">
            <summary>
            Framework 4.5
            </summary>
        </member>
        <member name="F:Alternet.Common.TargetNETFrameworkVersion.VersionAuto">
            <summary>
            Location of mscorlib
            </summary>
        </member>
        <member name="T:Alternet.Common.AssemblyReferenceResolver">
            <summary>
            Provides methods for resolving assembly references.
            </summary>
        </member>
        <member name="M:Alternet.Common.AssemblyReferenceResolver.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>AssemblyReferenceResolver</c> class with specified parameters.
            </summary>
            <param name="searchPaths">List of search directories to look for source files and referenced assemblies.</param>
            <param name="frameworkPath">Location of .NET Framework assemblies.</param>
            <param name="baseDirectory">The base directory that the assembly resolver uses to probe for assemblies.</param>
        </member>
        <member name="P:Alternet.Common.AssemblyReferenceResolver.BaseDirectory">
            <summary>
            Gets the base directory that the assembly resolver uses to look for assemblies.
            </summary>
        </member>
        <member name="P:Alternet.Common.AssemblyReferenceResolver.FrameworkPath">
            <summary>
            Gets location of .NET Framework assemblies.
            </summary>
        </member>
        <member name="P:Alternet.Common.AssemblyReferenceResolver.SearchPaths">
            <summary>
            Gets list of search directories to look for source files and referenced assemblies.
            </summary>
        </member>
        <member name="M:Alternet.Common.AssemblyReferenceResolver.GetPathToDotNetFrameworkReferenceAssemblies(Alternet.Common.TargetNETFrameworkVersion)">
            <summary>
            Returns path to the .NET Framework clr.
            </summary>
            <param name="version">.NET Framework version</param>
            <returns>path to the .NET framework</returns>
        </member>
        <member name="M:Alternet.Common.AssemblyReferenceResolver.ResolveReferenceAssemblyName(System.String,System.String,System.Boolean,Alternet.Common.DotNet.Projects.TargetFramework)">
            <summary>
            Returns assembly reference name accordingly to specified parameters.
            </summary>
            <param name="reference">Default assembly reference.</param>
            <param name="baseFilePath">The base directory used to probe for assembly.</param>
            <param name="searchInGAC">Specifies if assembly can be located in GAC.</param>
            <param name="targetFramework">Specifies Target framework.</param>
            <returns>AssemblyName of found assembly.</returns>
        </member>
        <member name="M:Alternet.Common.AssemblyReferenceResolver.ResolveReference(System.String,System.String,System.Boolean,Alternet.Common.DotNet.Projects.TargetFramework)">
            <summary>
            Returns assembly reference accordingly to specified parameters.
            </summary>
            <param name="reference">Default assembly reference.</param>
            <param name="baseFilePath">The base directory used to probe for assembly.</param>
            <param name="searchInGAC">Specifies if assembly can be located in GAC.</param>
            <param name="targetFramework">Specifies Target framework.</param>
            <returns>Fully qualified name of found assembly.</returns>
        </member>
        <member name="M:Alternet.Common.AssemblyReferenceResolver.ResolveAssemblyName(System.String,Alternet.Common.DotNet.DefaultAssemblies.IDefaultAssembliesProvider)">
            <summary>
            Try to find real assembly name matches the given name.
            </summary>
            <param name="name">Short assembly name.</param>
            <param name="defaultAssembliesProvider">Default assembly provider.</param>
            <returns>Full assembly name if succeed; otherwise empty string.</returns>
        </member>
        <member name="T:Alternet.Common.AsyncLazy`1">
            <summary>
            Provides support for asynchronous lazy initialization. This type is fully threadsafe.
            </summary>
            <typeparam name="T">The type of object that is being asynchronously initialized.</typeparam>
        </member>
        <member name="F:Alternet.Common.AsyncLazy`1.instance">
            <summary>
            The underlying lazy task.
            </summary>
        </member>
        <member name="M:Alternet.Common.AsyncLazy`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Alternet.Common.AsyncLazy`1"/> class.
            </summary>
            <param name="factory">The delegate that is invoked on a background thread to produce the value when it is needed.</param>
        </member>
        <member name="M:Alternet.Common.AsyncLazy`1.#ctor(System.Func{System.Threading.Tasks.Task{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Alternet.Common.AsyncLazy`1"/> class.
            </summary>
            <param name="factory">The asynchronous delegate that is invoked on a background thread to produce the value when it is needed.</param>
        </member>
        <member name="M:Alternet.Common.AsyncLazy`1.GetAwaiter">
            <summary>
            Asynchronous infrastructure support. This method permits instances of <see cref="T:Alternet.Common.AsyncLazy`1"/> to be await'ed.
            </summary>
        </member>
        <member name="M:Alternet.Common.AsyncLazy`1.Start">
            <summary>
            Starts the asynchronous initialization, if it has not already started.
            </summary>
        </member>
        <member name="T:Alternet.Common.Check">
            <summary>
            Provides assertion functions to check parameters meeting certain requirements.
            </summary>
        </member>
        <member name="M:Alternet.Common.Check.GetEnumValueNotSupportedException``1(``0)">
            <summary>
            Raises an exception informs that specified enumeration value is not supported.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The enumerated value.</param>
            <returns>Exception contains information about value.</returns>
        </member>
        <member name="M:Alternet.Common.Check.Assert(System.Boolean)">
            <summary>
            Checks for the condition. If the condition is false throws an exception.
            </summary>
            <param name="condition">Condition to check.</param>
        </member>
        <member name="M:Alternet.Common.Check.Verify(System.Boolean)">
            <summary>
            Verifies the condition. If the condition is false throws an exception.
            </summary>
            <param name="condition">Condition to check.</param>
        </member>
        <member name="M:Alternet.Common.Check.NonNull(System.Object,System.String)">
            <summary>
            Checks whether specified object is not null. If object is null throws an exception.
            </summary>
            <param name="obj">Object to examine.</param>
            <param name="parameterName">The name of the parameter that caused the exception.</param>
        </member>
        <member name="M:Alternet.Common.Check.NonNullOrEmpty(System.String,System.String)">
            <summary>
            Checks whether specified string is not null or an empty string. If string is null or empty throws an exception.
            </summary>
            <param name="str">String to examine.</param>
            <param name="parameterName">The name of the parameter that caused the exception.</param>
        </member>
        <member name="M:Alternet.Common.Check.NonNullOrEmpty(System.Collections.IEnumerable,System.String)">
            <summary>
            Checks whether specified value is not null or an empty value. If value is null or empty throws an exception.
            </summary>
            <param name="value">IEnumerable to examine.</param>
            <param name="parameterName">The name of the parameter that caused the exception.</param>
        </member>
        <member name="T:Alternet.Common.ChildProcessTracker">
            <summary>
            Allows processes to be automatically killed if this parent process unexpectedly quits.
            This feature requires Windows 8 or greater. On Windows 7, nothing is done.</summary>
            <remarks>References:
            https://stackoverflow.com/a/4657392/386091
            https://stackoverflow.com/a/9164742/386091 </remarks>
        </member>
        <member name="M:Alternet.Common.ChildProcessTracker.AddProcess(System.Diagnostics.Process)">
            <summary>
            Add the process to be tracked. If our current process is killed, the child processes
            that we are tracking will be automatically killed, too. If the child process terminates
            first, that's fine, too.</summary>
            <param name="process"></param>
        </member>
        <member name="T:Alternet.Common.ColorCursorHelper">
            <summary>
            Provides additional functionality for System.Windows.Forms.Cursor objects.
            </summary>
        </member>
        <member name="M:Alternet.Common.ColorCursorHelper.LoadFromResource(System.Type,System.String)">
            <summary>
            Locates the Cursor using specified parameters.
            </summary>
            <param name="type">The Type to look for the Cursor.</param>
            <param name="resource">Cursor's resource name.</param>
            <returns>The Cursor if succeed.</returns>
        </member>
        <member name="M:Alternet.Common.ColorCursorHelper.LoadFromStream(System.IO.Stream)">
            <summary>
            Locates the Cursor from specified Stream.
            </summary>
            <param name="cursorStream">The Stream to look for the Cursor.</param>
            <returns>The Cursor if succeed.</returns>
        </member>
        <member name="T:Alternet.Common.ColorHelper">
            <summary>
            Provides additional functionality for System.Drawing.Color objects.
            </summary>
        </member>
        <member name="M:Alternet.Common.ColorHelper.FromRgb(System.Int32)">
            <summary>
            Creates a System.Drawing.Color structure from a 32-bit RGB value. The alpha value is 255.
            </summary>
            <param name="rgb">A value specifying the 32-bit RGB value.</param>
            <returns>The System.Drawing.Color structure that this method creates.</returns>
        </member>
        <member name="M:Alternet.Common.ColorHelper.Blend(System.Drawing.Color,System.Drawing.Color,System.Double)">
            <summary>
            Blends the specified colors together.
            </summary>
            <param name="color">Color to blend onto the background color.</param>
            <param name="backColor">Color to blend the other color onto.</param>
            <param name="amount">How much of <paramref name="color"/> to keep,
            “on top of” <paramref name="backColor"/>.</param>
            <returns>The blended color.</returns>
        </member>
        <member name="M:Alternet.Common.ColorHelper.ColorToHtml(System.Drawing.Color)">
            <summary>
            Converts specified color into the HTML format.
            </summary>
            <param name="color">Color to convert.</param>
            <returns>String contains HTML representation of given color.</returns>
        </member>
        <member name="T:Alternet.Common.Consts">
            <summary>
            Contains default constants for common requirements.
            </summary>
        </member>
        <member name="T:Alternet.Common.FlickerFreeListBox">
            <summary>
            Provides flicker free ListBox.
            </summary>
        </member>
        <member name="M:Alternet.Common.FlickerFreeListBox.#ctor">
            <summary>
            Initializes a new instance of the <c>FlickerFreeListBox</c> class with default settings.
            </summary>
        </member>
        <member name="F:Alternet.Common.ProgressDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Alternet.Common.ProgressDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Alternet.Common.ProgressDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Alternet.Common.EditBorderStyle">
            <summary>
            Specifies the border style for Edit control.
            </summary>
        </member>
        <member name="F:Alternet.Common.EditBorderStyle.None">
            <summary>
            No border.
            </summary>
        </member>
        <member name="F:Alternet.Common.EditBorderStyle.Fixed3D">
            <summary>
            A three-dimensional border.
            </summary>
        </member>
        <member name="F:Alternet.Common.EditBorderStyle.FixedSingle">
            <summary>
            A single-line border.
            </summary>
        </member>
        <member name="F:Alternet.Common.EditBorderStyle.System">
            <summary>
            A system border.
            </summary>
        </member>
        <member name="T:Alternet.Common.SpeedButton">
            <summary>
            Represents a Windows button - like control.
            </summary>
        </member>
        <member name="M:Alternet.Common.SpeedButton.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <c>SpeedButton</c> class with specified container.
            </summary>
            <param name="container">Specifies IContainer that contains this new instance.</param>
        </member>
        <member name="M:Alternet.Common.SpeedButton.#ctor">
            <summary>
            Initializes a new instance of the <c>SpeedButton</c> class with default settings.
            </summary>
        </member>
        <member name="E:Alternet.Common.SpeedButton.CheckedChanged">
            <summary>
            Occurs when the value of the <c>Checked</c> property changes.
            </summary>
        </member>
        <member name="P:Alternet.Common.SpeedButton.ImageList">
            <summary>
            Gets or sets the ImageList that contains the images to display in this <c>SpeedButton</c>.
            </summary>
        </member>
        <member name="P:Alternet.Common.SpeedButton.ImageListHighDpi">
            <summary>
            Gets or sets the ImageList that contains the images to display in this <c>SpeedButton</c> for high DPI.
            </summary>
        </member>
        <member name="P:Alternet.Common.SpeedButton.ImageIndex">
            <summary>
            Gets or sets the index value of the image displayed on this <c>SpeedButton</c>.
            </summary>
        </member>
        <member name="P:Alternet.Common.SpeedButton.BorderStyle">
            <summary>
            Gets or sets border style of this <c>SpeedButton</c>.
            </summary>
        </member>
        <member name="P:Alternet.Common.SpeedButton.BorderColor">
            <summary>
            Gets or sets border color of this <c>SpeedButton</c>.
            </summary>
        </member>
        <member name="P:Alternet.Common.SpeedButton.Checked">
            <summary>
            Gets or sets a value indicating whether button appears pressed.
            </summary>
        </member>
        <member name="P:Alternet.Common.SpeedButton.AllowCheck">
            <summary>
            Gets or sets a value indicating whether button should automatically appear pressed in and not pressed in when clicked.
            </summary>
        </member>
        <member name="M:Alternet.Common.SpeedButton.OnCheckedChanged(System.EventArgs)">
            <summary>
            Raises the <c>CheckedChaged</c> event.
            </summary>
            <param name="args">The EventArgs that contains data to this event.</param>
        </member>
        <member name="T:Alternet.Common.Controls.TreeView.CustomDrawnTreeView">
            <summary>
            Provides node expand button hit test functionality for custom drawn tree views.
            </summary>
        </member>
        <member name="E:Alternet.Common.Controls.TreeView.CustomDrawnTreeView.NodePartHitTest">
            <summary>
            Occurs when part of TreeView node is clicked by left mouse button.
            </summary>
        </member>
        <member name="P:Alternet.Common.Controls.TreeView.CustomDrawnTreeView.NodePartHitTestEnabled">
            <summary>
            Gets or sets a value indicating whether hit test for the part of node is enabled.
            </summary>
        </member>
        <member name="T:Alternet.Common.Controls.TreeView.FlickerFreeTreeView">
            <summary>
            Specifies extended TreeView control suppresses flickering while TreeView content is changing.
            </summary>
        </member>
        <member name="T:Alternet.Common.Controls.TreeView.NodePart">
            <summary>
            Specifies types of node parts.
            </summary>
        </member>
        <member name="F:Alternet.Common.Controls.TreeView.NodePart.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Alternet.Common.Controls.TreeView.NodePart.ExpandButton">
            <summary>
            Specifies expand button.
            </summary>
        </member>
        <member name="T:Alternet.Common.Controls.TreeView.NodePartHitTestEventArgs">
            <summary>
            Provides data for the <c>NodePartHitTest</c> event handler.
            </summary>
        </member>
        <member name="M:Alternet.Common.Controls.TreeView.NodePartHitTestEventArgs.#ctor(System.Windows.Forms.TreeNode,System.Drawing.Point)">
            <summary>
            Initializes a new instance of the <c>NodePartHitTestEventArgs</c> class with specified settings.
            </summary>
            <param name="node">TreeNode to check.</param>
            <param name="locationInNode">Specifies the location of the mouse during the mouse event.</param>
        </member>
        <member name="P:Alternet.Common.Controls.TreeView.NodePartHitTestEventArgs.Node">
            <summary>
            Gets TreeNode to check.
            </summary>
        </member>
        <member name="P:Alternet.Common.Controls.TreeView.NodePartHitTestEventArgs.LocationInNode">
            <summary>
            Gets the location of the mouse during the mouse event.
            </summary>
        </member>
        <member name="P:Alternet.Common.Controls.TreeView.NodePartHitTestEventArgs.NodePart">
            <summary>
            Gets or sets kind of node part.
            </summary>
        </member>
        <member name="T:Alternet.Common.ControlUtilities">
            <summary>
            An utility class to work with controls..
            </summary>
        </member>
        <member name="M:Alternet.Common.ControlUtilities.IsChildHandle(System.Windows.Forms.Control,System.IntPtr)">
            <summary>
            Determines whether a control is a child control or descendant control of a specified parent control.
            </summary>
            <param name="control">A parent control.</param>
            <param name="handle">A handle to the control to be tested.</param>
            <returns>True if the control is a child or descendant control; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.ControlUtilities.ResumeDrawing(System.Windows.Forms.Control)">
            <summary>
            Allow changes in the control to be redrawn.
            </summary>
            <param name="parent">A control to be redrawn.</param>
        </member>
        <member name="M:Alternet.Common.ControlUtilities.SendMessage(System.Windows.Forms.Control,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Sends the specified message to a control.
            </summary>
            <param name="control">A control whose window procedure will receive the message.</param>
            <param name="message">The message to be sent.</param>
            <param name="wParam">Additional message-specific information.</param>
            <param name="lParam">Additional message-specific information.</param>
        </member>
        <member name="M:Alternet.Common.ControlUtilities.SuspendDrawing(System.Windows.Forms.Control)">
            <summary>
            Prevent changes in the control from being redrawn.
            </summary>
            <param name="parent">A control to be redrawn.</param>
        </member>
        <member name="M:Alternet.Common.ControlUtilities.IsMouseOverControl(System.Windows.Forms.Control)">
            <summary>
            Indicates if mouse pointer is hovered over specified control.
            </summary>
            <param name="control">Given control.</param>
            <returns>True if mouse inside control client area; otherwise false.</returns>
        </member>
        <member name="T:Alternet.Common.DesignerCategoryNames">
            <summary>
            Contains constants for names of Property Grid categories.
            </summary>
        </member>
        <member name="F:Alternet.Common.DesignerCategoryNames.Behavior">
            <summary>
            Name of the Behavior category.
            </summary>
        </member>
        <member name="F:Alternet.Common.DesignerCategoryNames.Appearance">
            <summary>
            Name of the Appearance category.
            </summary>
        </member>
        <member name="T:Alternet.Common.DisplayScaledImage">
            <summary>
            Chooses between regular and high-DPI image and/or scales images depending on current DPI setting.
            This class is for single image. See also DisplayScaledImages, DisplayScaledImagesByKey.
            </summary>
        </member>
        <member name="M:Alternet.Common.DisplayScaledImage.#ctor(System.Func{System.Drawing.Image},System.Func{System.Drawing.Image})">
            <summary>
            Initializes a new instance of DisplayScaledImage class.
            </summary>
            <param name="getImageFunc">A function to provide a 100% DPI image.</param>
            <param name="getImageHighDpiFunc">A function to provide a 200% DPI image.</param>
        </member>
        <member name="P:Alternet.Common.DisplayScaledImage.ImageNotScaled">
            <summary>
            Gets output image, but without any scaling applied.
            </summary>
        </member>
        <member name="P:Alternet.Common.DisplayScaledImage.Image">
            <summary>
            Gets output image, with scaling applied, if required.
            </summary>
        </member>
        <member name="M:Alternet.Common.DisplayScaledImage.Dispose">
            <summary>
            Disposes this <c>DisplayScaledImage</c> and frees resources associated with it.
            </summary>
        </member>
        <member name="T:Alternet.Common.DisplayScaledImages">
            <summary>
            Chooses between regular and high-DPI image and/or scales images depending on current DPI setting.
            This class is for image list. See also DisplayScaledImagesByKey, DisplayScaledImage.
            </summary>
        </member>
        <member name="M:Alternet.Common.DisplayScaledImages.#ctor(System.Func{System.Windows.Forms.ImageList},System.Func{System.Windows.Forms.ImageList})">
            <summary>
            Initializes a new instance of DisplayScaledImages class.
            </summary>
            <param name="getImagesFunc">A function to provide a 100% DPI image.</param>
            <param name="getImagesHighDpiFunc">A function to provide a 200% DPI image.</param>
        </member>
        <member name="P:Alternet.Common.DisplayScaledImages.ImagesNotScaled">
            <summary>
            Gets output images, but without any scaling applied.
            </summary>
        </member>
        <member name="P:Alternet.Common.DisplayScaledImages.Images">
            <summary>
            Gets output images, with scaling applied, if required.
            </summary>
        </member>
        <member name="M:Alternet.Common.DisplayScaledImages.Dispose">
            <summary>
            Disposes this <c>DisplayScaledImages</c> and frees resources associated with it.
            </summary>
        </member>
        <member name="M:Alternet.Common.DisplayScaledImages.ClearCache">
            <summary>
            Clears the scaled images cache.
            </summary>
        </member>
        <member name="T:Alternet.Common.DisplayScaledImagesByKey`1">
            <summary>
            Chooses between regular and high-DPI image and/or scales images depending on current DPI setting.
            This class is for images indexed by key. See also DisplayScaledImages, DisplayScaledImage.
            </summary>
        </member>
        <member name="M:Alternet.Common.DisplayScaledImagesByKey`1.#ctor(Alternet.Common.DisplayScaledImagesByKey{`0}.GetImageFunc,Alternet.Common.DisplayScaledImagesByKey{`0}.GetImageFunc)">
            <summary>
            Initializes a new instance of DisplayScaledImagesByKey class.
            </summary>
            <param name="getImageFunc">A function to provide a 100% DPI image.</param>
            <param name="getImageHighDpiFunc">A function to provide a 200% DPI image.</param>
        </member>
        <member name="T:Alternet.Common.DisplayScaledImagesByKey`1.GetImageFunc">
            <summary>
            Get image delegate.
            </summary>
            <param name="key">A key to index the image by.</param>
            <returns>The provided image.</returns>
        </member>
        <member name="M:Alternet.Common.DisplayScaledImagesByKey`1.GetImageNotScaled(`0)">
            <summary>
            Gets output image, but without any scaling applied.
            <param name="key">A key to index the image by.</param>
            </summary>
        </member>
        <member name="M:Alternet.Common.DisplayScaledImagesByKey`1.GetImage(`0)">
            <summary>
            Gets output image, with scaling applied, if required.
            <param name="key">A key to index the image by.</param>
            </summary>
        </member>
        <member name="M:Alternet.Common.DisplayScaledImagesByKey`1.Dispose">
            <summary>
            Disposes this <c>DisplayScaledImagesByKey</c> and frees resources associated with it.
            </summary>
        </member>
        <member name="T:Alternet.Common.DisplayScaledImagesEx">
            <summary>
            Chooses between regular and high-DPI image and/or scales images depending on current DPI setting.
            This class is for image list. See also DisplayScaledImagesByKey, DisplayScaledImage.
            </summary>
        </member>
        <member name="M:Alternet.Common.DisplayScaledImagesEx.#ctor(System.Func{Alternet.Common.AlphaImageList},System.Func{Alternet.Common.AlphaImageList})">
            <summary>
            Initializes a new instance of DisplayScaledImages class.
            </summary>
            <param name="getImagesFunc">A function to provide a 100% DPI image.</param>
            <param name="getImagesHighDpiFunc">A function to provide a 200% DPI image.</param>
        </member>
        <member name="P:Alternet.Common.DisplayScaledImagesEx.ImagesNotScaled">
            <summary>
            Gets output images, but without any scaling applied.
            </summary>
        </member>
        <member name="P:Alternet.Common.DisplayScaledImagesEx.Images">
            <summary>
            Gets output images, with scaling applied, if required.
            </summary>
        </member>
        <member name="M:Alternet.Common.DisplayScaledImagesEx.Dispose">
            <summary>
            Disposes this <c>DisplayScaledImages</c> and frees resources associated with it.
            </summary>
        </member>
        <member name="M:Alternet.Common.DisplayScaledImagesEx.ClearCache">
            <summary>
            Clears the scaled images cache.
            </summary>
        </member>
        <member name="M:Alternet.Common.DisplayScalingHelper.SetFont(System.Windows.Forms.ContainerControl,System.Drawing.Font)">
            <summary>
            Sets the specified font for all controls in the container in case if non-100% scaling is in effect.
            This helps to circumvent the bug in WinForms auto scaling.
            See http://stackoverflow.com/questions/2973165/autoscalemode-problems-with-changed-default-font
            <param name="container">Container control.</param>
            <param name="font">Font to be set.</param>
            </summary>
        </member>
        <member name="T:Alternet.Common.DotNet.Projects.SdkStyleReferences.SdkStyleReferencesService.Sdks">
            <summary>
            See https://docs.microsoft.com/en-us/dotnet/core/project-sdk/overview#available-sdks
            </summary>
        </member>
        <member name="T:Alternet.Common.EnumerableExtensions">
            <summary>
            Contains extended functionality for enumerable objects.
            </summary>
        </member>
        <member name="M:Alternet.Common.EnumerableExtensions.IndexOfFirst``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>Finds the index of the first item matching an expression in an enumerable.</summary>
            <param name="items">The enumerable to search.</param>
            <param name="predicate">The expression to test the items against.</param>
            <returns>The index of the first matching item, or -1 if no items match.</returns>
        </member>
        <member name="M:Alternet.Common.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>Finds the index of the first occurrence of an item in an enumerable.</summary>
            <param name="items">The enumerable to search.</param>
            <param name="item">The item to find.</param>
            <returns>The index of the first matching item, or -1 if the item was not found.</returns>
        </member>
        <member name="M:Alternet.Common.EnumerableExtensions.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Concatenates two sequences.
            </summary>
            <typeparam name="T">The type of the elements of the input sequences.</typeparam>
            <param name="a">The first sequence to concatenate.</param>
            <param name="b">The sequence to concatenate to the first sequence.</param>
            <returns>An IEnumerable that contains the concatenated elements of the two input sequences.</returns>
        </member>
        <member name="M:Alternet.Common.EnumerableExtensions.GetItemsHashCode``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Serves as the default hash function for the items in the sequence.
            </summary>
            <typeparam name="T">The type of the elements of the sequences.</typeparam>
            <param name="items">The sequence to get hash code.</param>
            <returns>A hash code for the sequence.</returns>
        </member>
        <member name="M:Alternet.Common.EnumerableExtensions.GetItemsHashCode``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Serves as the default hash function for the items in the sequence.
            </summary>
            <typeparam name="T">The type of the elements of the sequences.</typeparam>
            <param name="items">The sequence to get hash code.</param>
            <param name="getItemHashCodeFunc">Method calculates hash code for particular item.</param>
            <returns>A hash code for the sequence.</returns>
        </member>
        <member name="M:Alternet.Common.EnumerableExtensions.MaxElement``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Finds out element with maximum value in the container.
            </summary>
            <typeparam name="T">The type of the elements of the container.</typeparam>
            <typeparam name="TKey">The type of key value to calculate maximum.</typeparam>
            <param name="container">The container to probe.</param>
            <param name="valuingFoo">Method calculates max value.</param>
            <returns>Maximal element in the container.</returns>
        </member>
        <member name="T:Alternet.Common.ErrorBehavior">
            <summary>
            Defines types of reaction on error.
            </summary>
        </member>
        <member name="F:Alternet.Common.ErrorBehavior.Message">
            <summary>
            Message dialog displayed when error occurs.
            </summary>
        </member>
        <member name="F:Alternet.Common.ErrorBehavior.Exception">
            <summary>
            Exception is thrown when error occurs.
            </summary>
        </member>
        <member name="F:Alternet.Common.ErrorBehavior.None">
            <summary>
            No reaction.
            </summary>
        </member>
        <member name="T:Alternet.Common.ErrorHandler">
            <summary>
            Represents class that can react various ways for erroneous situations.
            This class is used internally for exceptions handling.
            </summary>
        </member>
        <member name="P:Alternet.Common.ErrorHandler.ErrorBehavior">
            <summary>
            Gets or sets a value indicating reaction on any error.
            </summary>
        </member>
        <member name="M:Alternet.Common.ErrorHandler.Error(System.Exception)">
            <summary>
            Processes given exception with defined way.
            </summary>
            <param name="exception">The Exception to process.</param>
        </member>
        <member name="T:Alternet.Common.ImageListHelper">
            <summary>
            Provides additional functionality for ImageList objects.
            </summary>
        </member>
        <member name="M:Alternet.Common.ImageListHelper.SaveImageListAsStrip(System.Windows.Forms.ImageList,System.String)">
            <summary>
            Joins content of given image list into a single stripped image an saves in into a specified file.
            </summary>
            <param name="imageList">ImageList to process.</param>
            <param name="fileName">Name of file to save result.</param>
        </member>
        <member name="M:Alternet.Common.ImageListHelper.LoadImageListFromStrip(System.Type,System.String)">
            <summary>
            Creates an ImageList from specified resource.
            </summary>
            <param name="resourceType">Type contains specified resource.</param>
            <param name="resourceName">Name of resource stores stripped image list.</param>
            <returns>System.Windows.Forms.ImageList contains images from resource.</returns>
        </member>
        <member name="M:Alternet.Common.ImageListHelper.LoadImageListFromStrip(System.Reflection.Assembly,System.String)">
            <summary>
            Creates an ImageList from specified resource.
            </summary>
            <param name="assembly">Assembly contains specified resource.</param>
            <param name="resourceName">Name of resource stores stripped image list.</param>
            <returns>System.Windows.Forms.ImageList contains images from resource.</returns>
        </member>
        <member name="M:Alternet.Common.ImageListHelper.TryLoadImageListFromStrip(System.Reflection.Assembly,System.String)">
            <summary>
            Tries to create an ImageList from specified resource.
            </summary>
            <param name="assembly">Assembly contains specified resource.</param>
            <param name="resourceName">Name of resource stores stripped image list.</param>
            <returns>System.Windows.Forms.ImageList contains images from resource.</returns>
        </member>
        <member name="T:Alternet.Common.InputSpy">
            <summary>
            Provides methods to be notified about keyboard and mouse actions.
            </summary>
        </member>
        <member name="E:Alternet.Common.InputSpy.KeyDown">
            <summary>
            This item supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="E:Alternet.Common.InputSpy.KeyUp">
            <summary>
            This item supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="E:Alternet.Common.InputSpy.MouseDown">
            <summary>
            This item supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="E:Alternet.Common.InputSpy.MouseMove">
            <summary>
            This item supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="E:Alternet.Common.InputSpy.MouseUp">
            <summary>
            This item supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="E:Alternet.Common.InputSpy.MouseWheel">
            <summary>
            This item supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Alternet.Common.InputSpy.IInputSpyKeyboardListener">
            <summary>
            This item supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Alternet.Common.InputSpy.IInputSpyKeyboardListener.OnInputSpyKeyDown(Alternet.Common.InputSpy.InputSpyKeyEventArgs)">
            <summary>
            This item supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Alternet.Common.InputSpy.IInputSpyKeyboardListener.OnInputSpyKeyUp(Alternet.Common.InputSpy.InputSpyKeyEventArgs)">
            <summary>
            This item supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Alternet.Common.InputSpy.IInputSpyListener">
            <summary>
            This item supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Alternet.Common.InputSpy.IInputSpyMouseListener">
            <summary>
            This item supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Alternet.Common.InputSpy.IInputSpyMouseListener.OnInputSpyMouseDown(Alternet.Common.InputSpy.InputSpyMouseEventArgs)">
            <summary>
            This item supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Alternet.Common.InputSpy.IInputSpyMouseListener.OnInputSpyMouseMove(Alternet.Common.InputSpy.InputSpyMouseEventArgs)">
            <summary>
            This item supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Alternet.Common.InputSpy.IInputSpyMouseListener.OnInputSpyMouseUp(Alternet.Common.InputSpy.InputSpyMouseEventArgs)">
            <summary>
            This item supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Alternet.Common.InputSpy.IInputSpyMouseListener.OnInputSpyMouseWheel(Alternet.Common.InputSpy.InputSpyMouseEventArgs)">
            <summary>
            This item supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Alternet.Common.InputSpy.PressedMouseButtons">
            <summary>
            This item supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Alternet.Common.InputSpy.IsKeyPressed(System.Windows.Forms.Keys)">
            <summary>
            This item supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Alternet.Common.InputSpy.IsKeyPressed(System.Int32)">
            <summary>
            This item supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Alternet.Common.InputSpy.IsRegistered(Alternet.Common.InputSpy.IInputSpyMouseListener)">
            <summary>
            This item supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Alternet.Common.InputSpy.IsRegistered(Alternet.Common.InputSpy.IInputSpyKeyboardListener)">
            <summary>
            This item supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Alternet.Common.InputSpy.IsRegistered(Alternet.Common.InputSpy.IInputSpyListener)">
            <summary>
            This item supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Alternet.Common.InputSpy.RegisterListener(Alternet.Common.InputSpy.IInputSpyMouseListener)">
            <summary>
            This item supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Alternet.Common.InputSpy.RegisterListener(Alternet.Common.InputSpy.IInputSpyKeyboardListener)">
            <summary>
            This item supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Alternet.Common.InputSpy.RegisterListener(Alternet.Common.InputSpy.IInputSpyListener)">
            <summary>
            This item supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Alternet.Common.InputSpy.UnregisterListener(Alternet.Common.InputSpy.IInputSpyMouseListener)">
            <summary>
            This item supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Alternet.Common.InputSpy.UnregisterListener(Alternet.Common.InputSpy.IInputSpyKeyboardListener)">
            <summary>
            This item supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Alternet.Common.InputSpy.UnregisterListener(Alternet.Common.InputSpy.IInputSpyListener)">
            <summary>
            This item supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Alternet.Common.InputSpy.InputSpyKeyEventArgs.#ctor(System.IntPtr,System.IntPtr)">
            <summary>
            This item supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Alternet.Common.InputSpy.InputSpyKeyEventArgs.EatKey">
            <summary>
            This item supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Alternet.Common.InputSpy.InputSpyKeyEventArgs.LParam">
            <summary>
            This item supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Alternet.Common.InputSpy.InputSpyKeyEventArgs.WParam">
            <summary>
            This item supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Alternet.Common.InputSpy.InputSpyMouseEventArgs">
            <summary>
            This item supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Alternet.Common.InputSpy.InputSpyMouseEventArgs.#ctor(System.IntPtr,System.Windows.Forms.MouseButtons,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            This item supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Alternet.Common.InputSpy.InputSpyMouseEventArgs.EatMouse">
            <summary>
            This item supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Alternet.Common.InputSpy.InputSpyMouseEventArgs.WindowHandle">
            <summary>
            This item supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Alternet.Common.KeysExtensions">
            <summary>
            Contains extension methods for Keys object.
            </summary>
        </member>
        <member name="M:Alternet.Common.KeysExtensions.IsNavigationOrSystemKey(System.Windows.Forms.Keys)">
            <summary>
            Determines if key is a navigation or system key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Alternet.Common.License.ComponentLicense">
            <summary>
            Provides the abstract base class for all AlterNET licenses. A license is granted to a specific instance of a component.
            </summary>
        </member>
        <member name="M:Alternet.Common.License.ComponentLicense.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <c>ComponentLicense</c> class with specified type.
            </summary>
            <param name="type">Specifies type for which the license is granted.</param>
        </member>
        <member name="P:Alternet.Common.License.ComponentLicense.Type">
            <summary>
            Represents the type for which the license is granted.
            </summary>
        </member>
        <member name="M:Alternet.Common.License.ComponentLicense.Dispose">
            <summary>
            Releases all resources used by this <c>ComponentLicense</c>.
            </summary>
        </member>
        <member name="T:Alternet.Common.License.ComponentLicenseManager">
            <summary>
            Supports license logic.
            </summary>
        </member>
        <member name="M:Alternet.Common.License.ComponentLicenseManager.CreateLicense(System.Type,Alternet.Common.License.LicenseKind)">
            <summary>
            Creates an <c>DesignTimeLicense</c> object using specified parameters.
            </summary>
            <param name="type">The Type for which license will be created.</param>
            <param name="licenseKind">Kind of the license.</param>
            <returns>The <c>DesignTimeLicense</c> object.</returns>
        </member>
        <member name="M:Alternet.Common.License.ComponentLicenseManager.ValidateLicense(System.Type,System.Object)">
            <summary>
            Determines whether a license can be granted for the instance of the specified type.
            </summary>
            <param name="type">A System.Type that represents the type of object that requests the license.</param>
            <param name="instance">An System.Object of the specified type or a type derived from the specified type.</param>
        </member>
        <member name="T:Alternet.Common.License.ComponentLicenseProvider">
            <summary>
            Represents license provider for licensed components.
            </summary>
        </member>
        <member name="M:Alternet.Common.License.ComponentLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
            <summary>
            Gets a license for an instance or type of component, when given a context and whether the denial of a license throws an exception.
            </summary>
            <param name="context">A System.ComponentModel.LicenseContext that specifies where you can use the licensed object.</param>
            <param name="type">A System.Type that represents the component requesting the license.</param>
            <param name="instance">An object that is requesting the license.</param>
            <param name="allowExceptions">True if a System.ComponentModel.LicenseException should be thrown when the component cannot be granted a license; otherwise, false.</param>
            <returns>A valid System.ComponentModel.License.</returns>
        </member>
        <member name="T:Alternet.Common.License.DesignTimeLicense">
            <summary>
            Provides the class for design-time type licenses. A license is granted to a specific instance of a component.
            </summary>
        </member>
        <member name="M:Alternet.Common.License.DesignTimeLicense.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <c>DesignTimeLicense</c> class with specified settings.
            </summary>
            <param name="type">Specifies type for which the license is granted.</param>
            <param name="fileName">Specifies name of the license file.</param>
        </member>
        <member name="P:Alternet.Common.License.DesignTimeLicense.IsEmpty">
            <summary>
            Indicates if the license is empty.
            </summary>
        </member>
        <member name="P:Alternet.Common.License.DesignTimeLicense.IsActivated">
            <summary>
            Indicates if the license is already activated.
            </summary>
        </member>
        <member name="P:Alternet.Common.License.DesignTimeLicense.IsTrial">
            <summary>
            Indicates if the license is of evaluation type.
            </summary>
        </member>
        <member name="P:Alternet.Common.License.DesignTimeLicense.DaysLeft">
            <summary>
            Returns the number of days remaining before the license expires.
            </summary>
        </member>
        <member name="P:Alternet.Common.License.DesignTimeLicense.EndDate">
            <summary>
            Returns the date when the license expires.
            </summary>
        </member>
        <member name="P:Alternet.Common.License.DesignTimeLicense.IsExpired">
            <summary>
            Indicates if the license is expired.
            </summary>
        </member>
        <member name="P:Alternet.Common.License.DesignTimeLicense.UnsupportedVersion">
            <summary>
            Indicates if the license is unsupported for the current version of the software.
            </summary>
        </member>
        <member name="P:Alternet.Common.License.DesignTimeLicense.IsValid">
            <summary>
            Indicates if the license is valid.
            </summary>
        </member>
        <member name="P:Alternet.Common.License.DesignTimeLicense.SerialNumber">
            <summary>
            Represents serial number of the license.
            </summary>
        </member>
        <member name="P:Alternet.Common.License.DesignTimeLicense.Customer">
            <summary>
            Represents e-mail to which the license is registered.
            </summary>
        </member>
        <member name="P:Alternet.Common.License.DesignTimeLicense.Product">
            <summary>
            Represents name of the product to which the license is registered.
            </summary>
        </member>
        <member name="P:Alternet.Common.License.DesignTimeLicense.Version">
            <summary>
            Represents version of the product to which the license is registered.
            </summary>
        </member>
        <member name="P:Alternet.Common.License.DesignTimeLicense.LicenseKind">
            <summary>
            Represents the license kind.
            </summary>
        </member>
        <member name="P:Alternet.Common.License.DesignTimeLicense.CreatedDate">
            <summary>
            Represents DateTime when the license was created.
            </summary>
        </member>
        <member name="P:Alternet.Common.License.DesignTimeLicense.InvalidReason">
            <summary>
            Gets or sets the reason describing why the license is invalid.
            </summary>
        </member>
        <member name="P:Alternet.Common.License.DesignTimeLicense.InvalidReasonRunTime">
            <summary>
            Gets or sets the runtime version of reason describing why the license is invalid.
            </summary>
        </member>
        <member name="P:Alternet.Common.License.DesignTimeLicense.LicenseKey">
            <summary>
            Represents the license key.
            </summary>
        </member>
        <member name="M:Alternet.Common.License.DesignTimeLicense.Validate">
            <summary>
            Validates the license.
            </summary>
            <returns>True if the license valid; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.License.DesignTimeLicense.GetProperty(System.String)">
            <summary>
            Finds property value by its name.
            </summary>
            <param name="name">Name of the property.</param>
            <returns>Property value if find succeed; otherwise empty string.</returns>
        </member>
        <member name="T:Alternet.Common.License.DesignTimeLicense.LicenseProperty">
            <summary>
            Contains properties for a specific license.
            </summary>
        </member>
        <member name="M:Alternet.Common.License.DesignTimeLicense.LicenseProperty.#ctor(System.String,System.String)">
            <summary>
            Initializes new instance of the <c>LicenseProperty</c> class with specified properties.
            </summary>
            <param name="name"><c>Name</c> of this new instance.</param>
            <param name="value"><c>Value</c> of this new instance.</param>
        </member>
        <member name="P:Alternet.Common.License.DesignTimeLicense.LicenseProperty.Value">
            <summary>
            Represents a value of the specific license.
            </summary>
        </member>
        <member name="P:Alternet.Common.License.DesignTimeLicense.LicenseProperty.Name">
            <summary>
            Represents a name of the specific license.
            </summary>
        </member>
        <member name="T:Alternet.Common.License.LicenseDialog">
            <summary>
            Represents dialog box that shows license-related information or warnings.
            </summary>
        </member>
        <member name="M:Alternet.Common.License.LicenseDialog.#ctor">
            <summary>
            Initializes a new instance of the <c>LicenseDialog</c> class with default settings.
            </summary>
        </member>
        <member name="M:Alternet.Common.License.LicenseDialog.DisplayExpired(System.Type,Alternet.Common.License.DesignTimeLicense)">
            <summary>
            Displays <c>LicenseDialog</c> for expired license.
            </summary>
            <param name="type">Specifies type for which the license is requested.</param>
            <param name="license">Expired license.</param>
        </member>
        <member name="M:Alternet.Common.License.LicenseDialog.DisplayInvalid(System.Type,Alternet.Common.License.DesignTimeLicense)">
            <summary>
            Displays <c>LicenseDialog</c> for invalid license.
            </summary>
            <param name="type">Specifies type for which the license is requesed.</param>
            <param name="license">Invalid license.</param>
        </member>
        <member name="M:Alternet.Common.License.LicenseDialog.DisplayUnsupportedVersion(System.Type,Alternet.Common.License.DesignTimeLicense)">
            <summary>
            Displays <c>LicenseDialog</c> for unsupported license.
            </summary>
            <param name="type">Specifies type for which the license is requested.</param>
            <param name="license">Unsupported license.</param>
        </member>
        <member name="M:Alternet.Common.License.LicenseDialog.ContinueTrial(System.Type,Alternet.Common.License.DesignTimeLicense)">
            <summary>
            Displays <c>LicenseDialog</c> for trial license.
            </summary>
            <param name="type">Specifies type for which the license is requested.</param>
            <param name="license">Trial license.</param>
        </member>
        <member name="M:Alternet.Common.License.LicenseDialog.DisplayRuntimeTrial(System.String,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Displays <c>LicenseDialog</c> for the runtime license.
            </summary>
            <param name="product">Specifies product name.</param>
            <param name="isTrial">Specifies whether license is trial.</param>
            <param name="isValid">Specifies whether license is valid.</param>
            <param name="unsupportedVersion">Specifies whether license is unsupported.</param>
            <param name="invalidReason">Specifies reason why the license is not valid.</param>
        </member>
        <member name="F:Alternet.Common.License.LicenseDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Alternet.Common.License.LicenseDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">True if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Alternet.Common.License.LicenseDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Alternet.Common.License.IntallationLocationDetector">
            <summary>
            Provides functionality for searching installation location.
            </summary>
        </member>
        <member name="M:Alternet.Common.License.IntallationLocationDetector.GetInstallationLocationForCurrentVersion">
            <summary>
            Finds out fully qualified path of current version location stored in the registry.
            </summary>
            <returns>System.IO.DirectoryInfo contains information about location of current version.</returns>
        </member>
        <member name="T:Alternet.Common.License.LicenseKind">
            <summary>
            Defines license kind.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Alternet.Common.License.LicenseKind.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Alternet.Common.License.LicenseKind.CodeEditor_WinForms">
            <summary>
            Specifies license for the Code Editor component under Windows Forms platform.
            </summary>
        </member>
        <member name="F:Alternet.Common.License.LicenseKind.CodeEditor_Wpf">
            <summary>
            Specifies license for the Code Editor component under WPF platform.
            </summary>
        </member>
        <member name="F:Alternet.Common.License.LicenseKind.CodeEditor">
            <summary>
            Specifies license for the Code Editor component for any platforms.
            </summary>
        </member>
        <member name="F:Alternet.Common.License.LicenseKind.Scripter_WinForms">
            <summary>
            Specifies license for the Scripter component under Windows Forms platform.
            </summary>
        </member>
        <member name="F:Alternet.Common.License.LicenseKind.Scripter_Wpf">
            <summary>
            Specifies license for the Scripter component under WPF platform.
            </summary>
        </member>
        <member name="F:Alternet.Common.License.LicenseKind.Scripter">
            <summary>
            Specifies license for the Scripter component for any platforms.
            </summary>
        </member>
        <member name="F:Alternet.Common.License.LicenseKind.Designer_WinForms">
            <summary>
            Specifies license for the Designer component under Windows Forms platform.
            </summary>
        </member>
        <member name="F:Alternet.Common.License.LicenseKind.Designer_Wpf">
            <summary>
            Specifies license for the Designer component under WPF platform.
            </summary>
        </member>
        <member name="F:Alternet.Common.License.LicenseKind.Designer">
            <summary>
            Specifies license for the Designer component for any platforms.
            </summary>
        </member>
        <member name="F:Alternet.Common.License.LicenseKind.Studio_WinForms">
            <summary>
            Specifies license for the all components under Windows Forms platform.
            </summary>
        </member>
        <member name="F:Alternet.Common.License.LicenseKind.Studio_Wpf">
            <summary>
            Specifies license for the all components under WPF platform.
            </summary>
        </member>
        <member name="F:Alternet.Common.License.LicenseKind.Studio">
            <summary>
            Specifies license for the all components for any platforms.
            </summary>
        </member>
        <member name="T:Alternet.Common.License.RuntimeLicense">
            <summary>
            Provides the class for runtime type licenses. A license is granted to a specific instance of a component.
            </summary>
        </member>
        <member name="M:Alternet.Common.License.RuntimeLicense.#ctor(System.Type,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <c>RuntimeLicense</c> class with specified settings.
            </summary>
            <param name="type">Type of the licensed control.</param>
            <param name="product">Applicable software product.</param>
            <param name="isTrial">Specifies if evaluation license is used.</param>
            <param name="isValid">Specifies if valid license is used.</param>
            <param name="invalidReason">Specifies invalid reason in case license is invalid.</param>
        </member>
        <member name="P:Alternet.Common.License.RuntimeLicense.LicenseKey">
            <summary>
            Gets the license key stored for the licensed component.
            </summary>
        </member>
        <member name="T:Alternet.Common.MathUtilities">
            <summary>
            Contains extended functionality for mathematic operations.
            </summary>
        </member>
        <member name="M:Alternet.Common.MathUtilities.IsCloseTo(System.Double,System.Double,System.Double)">
            <summary>
            Indicates whether two given values are close to each other.
            </summary>
            <param name="a">First value to probe.</param>
            <param name="b">Second value to probe.</param>
            <param name="epsilon">Value that limits difference.</param>
            <returns>True if difference between two values less then epsilon; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.MathUtilities.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps given value between specified dimensions.
            </summary>
            <param name="value">Value to probe.</param>
            <param name="min">Minimum possible value.</param>
            <param name="max">Maximum possible value.</param>
            <returns>Integer value that does not exceed specified dimensions.</returns>
        </member>
        <member name="M:Alternet.Common.MathUtilities.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Clamps given value between specified dimensions.
            </summary>
            <param name="value">Value to probe.</param>
            <param name="min">Minimum possible value.</param>
            <param name="max">Maximum possible value.</param>
            <returns>Double value that does not exceed specified dimensions.</returns>
        </member>
        <member name="M:Alternet.Common.MathUtilities.Wrap(System.Int32,System.Int32,System.Int32)">
            <summary>
            Wraps given value into specified interval.
            </summary>
            <param name="value">Value to probe.</param>
            <param name="min">Minimum possible value.</param>
            <param name="max">Maximum possible value.</param>
            <returns>Maximum if value less then minimum, minimum if value more then maximum; otherwise original value.</returns>
        </member>
        <member name="M:Alternet.Common.MathUtilities.Min(System.Double[])">
            <summary>
            Returns the smaller of double values in a one-dimensional array.
            </summary>
            <param name="values">The one-dimensional array to compare.</param>
            <returns>The smallest double value.</returns>
        </member>
        <member name="M:Alternet.Common.MathUtilities.IndexOfMin(System.Double[])">
            <summary>
            Searches for the smallest value and returns the index of its occurrence in a one-dimensional array.
            </summary>
            <param name="values">The one-dimensional array to search.</param>
            <returns>The index of the smallest value the in array, if found; otherwise -1.</returns>
        </member>
        <member name="M:Alternet.Common.MathUtilities.Min(System.Int32[])">
            <summary>
            Returns the smaller of integer values in a one-dimensional array.
            </summary>
            <param name="values">The one-dimensional array to compare.</param>
            <returns>The smallest integer value.</returns>
        </member>
        <member name="M:Alternet.Common.MathUtilities.Max(System.Double[])">
            <summary>
            Returns the largest of double values in a one-dimensional array.
            </summary>
            <param name="values">The one-dimensional array to compare.</param>
            <returns>The largest double value.</returns>
        </member>
        <member name="M:Alternet.Common.MathUtilities.IndexOfMax(System.Double[])">
            <summary>
            Searches for the largest value and returns the index of its occurrence in a one-dimensional array.
            </summary>
            <param name="values">The one-dimensional array to search.</param>
            <returns>The index of the largest value the in array, if found; otherwise -1.</returns>
        </member>
        <member name="M:Alternet.Common.MathUtilities.Max(System.Int32[])">
            <summary>
            Returns the largest of integer values in a one-dimensional array.
            </summary>
            <param name="values">The one-dimensional array to compare.</param>
            <returns>The largest integer value.</returns>
        </member>
        <member name="T:Alternet.Common.MouseUtilities">
            <summary>
            An utility class to handle mouse events.
            </summary>
        </member>
        <member name="M:Alternet.Common.MouseUtilities.SimulateMouseLeftButtonClick">
            <summary>
            Simulates mouse left button click.
            </summary>
        </member>
        <member name="T:Alternet.Common.OSUtils">
            <summary>
            Represents native Win32 API methods.
            </summary>
        </member>
        <member name="M:Alternet.Common.OSUtils.ShowWindowTopMost(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Places the window above all non-topmost windows.
            </summary>
            <param name="hwnd">Handle to the window.</param>
            <param name="x">Specifies the new position of the left side of the window, in client coordinates.</param>
            <param name="y">Specifies the new position of the top of the window, in client coordinates.</param>
            <param name="cx">Specifies the new width of the window, in pixels.</param>
            <param name="cy">Specifies the new height of the window, in pixels.</param>
            <returns>True if success; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.OSUtils.EnumChildWindows(System.IntPtr,Alternet.Common.EnumChildProc,System.IntPtr)">
            <summary>
            The EnumChildWindows function enumerates the child windows that belong to the specified parent window by passing the handle of each child window, in turn, to an application-defined callback function. EnumChildWindows continues until the last child window is enumerated or the callback function returns false.
            </summary>
            <param name="hwndParent">Identifies the parent window whose child windows are to be enumerated.</param>
            <param name="lpEnumFunc">Points to an application-defined callback function.</param>
            <param name="lparam">Specifies a 32-bit, application-defined value to be passed to the callback function.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.OSUtils.GetText(System.IntPtr)">
            <summary>
            Retrieves text that corresponds to a window.
            </summary>
            <param name="hwnd">Handle of window.</param>
            <returns>Text that corresponds to a window.</returns>
        </member>
        <member name="M:Alternet.Common.OSUtils.SetText(System.IntPtr,System.String)">
            <summary>
            Sets the text of a window.
            </summary>
            <param name="hwnd">Handle of the window.</param>
            <param name="text">New text of the window.</param>
        </member>
        <member name="M:Alternet.Common.OSUtils.GetClassName(System.IntPtr)">
            <summary>
            The GetClassName function retrieves the name of the class to which the specified window belongs.
            </summary>
            <param name="hwnd">Identifies the window and, indirectly, the class to which the window belongs.</param>
            <returns>Name of the class.</returns>
        </member>
        <member name="M:Alternet.Common.OSUtils.GetScreenCaps">
            <summary>
            Retrieves size in pixels per logical inch of entire screen.
            </summary>
            <returns>Size of entire screen.</returns>
        </member>
        <member name="M:Alternet.Common.OSUtils.GetWindowDC(System.IntPtr)">
            <summary>
            Retrieves the device context (DC) for the entire window.
            </summary>
            <param name="hwnd">Handle to the window with a device context that is to be retrieved.</param>
            <returns>If the function succeeds, the return value is a handle to a device context for the specified window; otherwise return value is null.</returns>
        </member>
        <member name="M:Alternet.Common.OSUtils.ReleaseDC(System.IntPtr,System.IntPtr)">
            <summary>
            Releases a device context (DC), freeing it for use by other applications.
            </summary>
            <param name="hwnd">Handle to the window whose DC is to be released.</param>
            <param name="hdc">Handle to the DC to be released.</param>
            <returns>The return value indicates whether the DC was released. If the DC was released, the return value is 1; otherwise the return value is zero.</returns>
        </member>
        <member name="M:Alternet.Common.OSUtils.DeleteObject(System.IntPtr)">
            <summary>
            The DeleteObject function deletes a logical pen, brush, font, bitmap, region, or palette, freeing all system resources associated with the object. After the object is deleted, the specified handle is no longer valid.
            </summary>
            <param name="handle">A handle to a logical pen, brush, font, bitmap, region, or palette.</param>
            <returns>If the function succeeds, the return value is nonzero. If the specified handle is not valid or is currently selected into a DC, the return value is zero.</returns>
        </member>
        <member name="M:Alternet.Common.OSUtils.IsFontMonospace(System.String,System.Drawing.FontStyle,System.Int32)">
            <summary>
            Determines if font family represents mono-space font;
            </summary>
            <param name="fontFamily">Font family.</param>
            <param name="fontStyle">Font style</param>
            <param name="fontHeight">Font height</param>
            <returns>True if font is mono-space, otherwise False.</returns>
        </member>
        <member name="M:Alternet.Common.OSUtils.SetScrollBar(System.IntPtr,System.Boolean,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the parameters of a scroll bar, including the minimum and maximum scrolling positions, the page size, and the position of the scroll box (thumb).
            </summary>
            <param name="handle">Handle to a scroll bar control or a window with a standard scroll bar.</param>
            <param name="flat">Indicates whether scroll bar is flat.</param>
            <param name="size">Specifies the maximum scrolling position.</param>
            <param name="pageSize">Specifies the page size.</param>
            <param name="isVertical">Indicates whether scroll bar is vertical or horizontal.</param>
        </member>
        <member name="M:Alternet.Common.OSUtils.SetScrollPos(System.IntPtr,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Sets the position of the scroll box (thumb) in the specified scroll bar.
            </summary>
            <param name="handle">Handle to a scroll bar control or a window with a standard scroll bar.</param>
            <param name="flat">Indicates whether scroll bar is flat.</param>
            <param name="pos">Specifies the position of the scroll box.</param>
            <param name="isVertical">Indicates whether scroll bar is vertical or horizontal.</param>
        </member>
        <member name="M:Alternet.Common.OSUtils.GetScrollPos(System.IntPtr,System.Boolean,System.Boolean)">
            <summary>
            Retrieves the current position of the scroll box (thumb) in the specified scroll bar.
            </summary>
            <param name="handle">Handle to a scroll bar control or a window with a standard scroll bar.</param>
            <param name="flat">Indicates whether scroll bar is flat.</param>
            <param name="isVertical">Indicates whether scroll bar is vertical or horizontal.</param>
            <returns>If the function succeeds, the return value is the current position of the scroll box; otherwise zero.</returns>
        </member>
        <member name="M:Alternet.Common.OSUtils.GetScrollSize(System.IntPtr,System.Boolean,System.Boolean)">
            <summary>
            Retrieves the page size of the scroll box (thumb) in the specified scroll bar.
            </summary>
            <param name="handle">Handle to a scroll bar control or a window with a standard scroll bar.</param>
            <param name="flat">Indicates whether scroll bar is flat.</param>
            <param name="isVertical">Indicates whether scroll bar is vertical or horizontal.</param>
            <returns>If the function succeeds, the return value is the page size of the scroll box; otherwise zero.</returns>
        </member>
        <member name="M:Alternet.Common.OSUtils.GetScrollSize(System.Boolean)">
            <summary>
            Retrieves dimension of the arrow bitmap of a scroll bar, in pixels.
            </summary>
            <param name="isVertical">Indicates whether scroll bar is vertical.</param>
            <returns>Dimension of the arrow bitmap.</returns>
        </member>
        <member name="M:Alternet.Common.OSUtils.ScrollWindow(System.IntPtr,System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Scrolls the contents of the specified window's client area.
            </summary>
            <param name="handle">Handle to the window where the client area is to be scrolled.</param>
            <param name="x">Specifies the amount of horizontal scrolling.</param>
            <param name="y">Specifies the amount of vertical scrolling.</param>
            <param name="rect">Rectangle that specifies the portion of the client area to be scrolled.</param>
        </member>
        <member name="M:Alternet.Common.OSUtils.GetScrollType(System.Int32)">
            <summary>
            Converts given code to the type of scroll event action.
            </summary>
            <param name="code">Code to convert.</param>
            <returns>ScrollEventType of scroll event action.</returns>
        </member>
        <member name="M:Alternet.Common.OSUtils.InitializeFlatSB(System.IntPtr)">
            <summary>
            Initializes flat scroll bars for a particular window.
            </summary>
            <param name="handle">Handle to the window that will receive flat scroll bars.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.OSUtils.UninitializeFlatSB(System.IntPtr)">
            <summary>
            Uninitializes flat scroll bars for a particular window.
            </summary>
            <param name="handle">Handle to the window with the flat scroll bars that will be uninitialized.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.OSUtils.GetDoubleClickTime">
            <summary>
            Retrieves the current double-click time for the mouse.
            </summary>
            <returns>Returns the current double-click time, in milliseconds.</returns>
        </member>
        <member name="M:Alternet.Common.OSUtils.SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            The SendMessage function sends the specified message to a window or windows. The function calls the window procedure for the specified window and does not return until the window procedure has processed the message.
            </summary>
            <param name="hwnd">Identifies the window whose window procedure will receive the message.</param>
            <param name="msg">Specifies the message to be sent. </param>
            <param name="wparam">Specifies additional message-specific information. </param>
            <param name="lparam">Specifies additional message-specific information. </param>
            <returns>Result of the message processing and depends on the message sent.</returns>
        </member>
        <member name="M:Alternet.Common.OSUtils.PostMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Places a message in the message queue associated with the thread that created the specified window and returns without waiting for the thread to process the message.
            </summary>
            <param name="hwnd">Handle to the window whose window procedure is to receive the message.</param>
            <param name="msg">Specifies the message to be posted.</param>
            <param name="wparam">Specifies additional message-specific information.</param>
            <param name="lparam">Specifies additional message-specific information.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.OSUtils.IsMouseMsg(System.Int32)">
            <summary>
            Indicates whether specified message is mouse message.
            </summary>
            <param name="msg">Message to check-up.</param>
            <returns>True if it is mouse message; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.OSUtils.SetCursor(System.IntPtr)">
            <summary>
            The SetCursor function establishes the cursor shape.
            </summary>
            <param name="handle">Identifies the cursor.</param>
            <returns>The handle to the previous cursor if success; otherwise null.</returns>
        </member>
        <member name="M:Alternet.Common.OSUtils.CreateCaret(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Creates a new shape for the system caret and assigns ownership of the caret to the specified window.
            </summary>
            <param name="handle">Handle to the window that owns the caret.</param>
            <param name="width">Specifies the width of the caret in logical units.</param>
            <param name="height">Specifies the height of the caret in logical units.</param>
            <returns>If the function succeeds, the return value is nonzero; otherwise zero.</returns>
        </member>
        <member name="M:Alternet.Common.OSUtils.ShowCaret(System.IntPtr)">
            <summary>
            Makes the caret visible on the screen at the caret's current position.
            </summary>
            <param name="handle">Handle to the window that owns the caret.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.OSUtils.DestroyCaret">
            <summary>
            Destroys the caret's current shape, frees the caret from the window, and removes the caret from the screen.
            </summary>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.OSUtils.SetCaretPos(System.Int32,System.Int32)">
            <summary>
            Moves the caret to the specified coordinates.
            </summary>
            <param name="x">Specifies the new x-coordinate of the caret.</param>
            <param name="y">Specifies the new y-coordinate of the caret.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.OSUtils.ImmSetCompositionWindow(System.IntPtr,System.Drawing.Point)">
            <summary>
            Sets the position of the composition window.
            </summary>
            <param name="wnd">Handle to the input context.</param>
            <param name="pos">A Point containing the coordinates of the upper left corner of the composition window.</param>
        </member>
        <member name="M:Alternet.Common.OSUtils.ImmSetCompositionFont(System.IntPtr,System.Drawing.Font)">
            <summary>
            Sets the logical font to use to display characters in the composition window.
            </summary>
            <param name="wnd">Handle to the input context.</param>
            <param name="font">Font information to set.</param>
        </member>
        <member name="M:Alternet.Common.OSUtils.ImeComposition(System.IntPtr)">
            <summary>
            Retrieves information about the composition.
            </summary>
            <param name="wnd">Handle to the input context.</param>
        </member>
        <member name="M:Alternet.Common.OSUtils.UpdateCompositionWindow(System.IntPtr,System.Drawing.Point,System.IntPtr)">
            <summary>
            Updates position information for a composition window.
            </summary>
            <param name="wnd">Handle to the input context.</param>
            <param name="pos">A Point containing the coordinates of the upper left corner of the composition window.</param>
            <param name="wndPos">Pointer to the composition window.</param>
        </member>
        <member name="M:Alternet.Common.OSUtils.ExcludeClipRect(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The ExcludeClipRect function creates a new clipping region that consists of the existing clipping region minus the specified rectangle.
            </summary>
            <param name="hdc">Identifies the device context. </param>
            <param name="l">Specifies the logical x-coordinate of the upper-left corner of the rectangle.</param>
            <param name="t">Specifies the logical y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="r">Specifies the logical x-coordinate of the lower-right corner of the rectangle.</param>
            <param name="b">Specifies the logical y-coordinate of the lower-right corner of the rectangle.</param>
            <returns>Specifies type of new clipping region.</returns>
        </member>
        <member name="M:Alternet.Common.OSUtils.LoWord(System.IntPtr)">
            <summary>
            Retrieves the low-order word from the specified value.
            </summary>
            <param name="value">Specifies the value to be converted.</param>
            <returns>The return value is the low-order word of the specified value.</returns>
        </member>
        <member name="M:Alternet.Common.OSUtils.HiWord(System.IntPtr)">
            <summary>
            Retrieves the high-order word from the given value.
            </summary>
            <param name="value">Specifies the value to be converted.</param>
            <returns>The return value is the high-order word of the specified value.</returns>
        </member>
        <member name="M:Alternet.Common.OSUtils.InitCommonControls">
            <summary>
            Registers and initializes the common control window classes.
            </summary>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.OSUtils.MessageBeep">
            <summary>
            Plays default waveform sound.
            </summary>
        </member>
        <member name="M:Alternet.Common.OSUtils.Beep(System.Int32,System.Int32)">
            <summary>
            Generates simple tones on the speaker.
            </summary>
            <param name="freq">Frequency of the sound, in hertz.</param>
            <param name="duration">Duration of the sound, in milliseconds.</param>
        </member>
        <member name="M:Alternet.Common.OSUtils.Sleep(System.Int32)">
            <summary>
            Suspends the execution of the current thread for a specified interval.
            </summary>
            <param name="milliSeconds">Specifies time, in milliseconds, for which to suspend execution.</param>
        </member>
        <member name="M:Alternet.Common.OSUtils.SetMouseHook(Alternet.Common.HookHandler)">
            <summary>
            Installs hook procedure that monitors mouse messages into a hook chain.
            </summary>
            <param name="lpfn">Hook procedure.</param>
            <returns>If the function succeeds, the return value is the handle to the hook procedure; otherwise return value is null.</returns>
        </member>
        <member name="M:Alternet.Common.OSUtils.SetWndProcHook(Alternet.Common.HookHandler)">
            <summary>
            Installs hook procedure that monitors messages before the system sends them to the destination window procedure into a hook chain.
            </summary>
            <param name="lpfn">Hook procedure.</param>
            <returns>If the function succeeds, the return value is the handle to the hook procedure; otherwise return value is null.</returns>
        </member>
        <member name="M:Alternet.Common.OSUtils.ReleaseHook(System.IntPtr)">
            <summary>
            Removes a hook procedure installed in a hook chain.
            </summary>
            <param name="hhk">Handle to the hook to be removed.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.OSUtils.CallNextHook(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Passes the hook information to the next hook procedure in the current hook chain. A hook procedure can call this function either before or after processing the hook information.
            </summary>
            <param name="hhk">Handle to the current hook.</param>
            <param name="code">Hook code passed to the current hook procedure.</param>
            <param name="wparam">Specifies the wparam value passed to the current hook procedure.</param>
            <param name="lparam">Specifies the lparam value passed to the current hook procedure.</param>
            <returns>This value is returned by the next hook procedure in the chain.</returns>
        </member>
        <member name="M:Alternet.Common.OSUtils.GetMouseHookHandle(System.IntPtr,System.Drawing.Point@)">
            <summary>
            Get structure associated with mouse hook.
            </summary>
            <param name="lparam">Mouse hook data.</param>
            <param name="pt">Mouse point.</param>
            <returns>Window handle sending mouse message.</returns>
        </member>
        <member name="T:Alternet.Common.OSUtils.CWPSTRUCT">
            <summary>
            Defines the message parameters passed to a WH_CALLWNDPROC hook procedure, CallWndProc.
            </summary>
        </member>
        <member name="T:Alternet.Common.ControlState">
            <summary>
            Defines control state.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Alternet.Common.ControlState.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Alternet.Common.ControlState.Normal">
            <summary>
            Specifies that control is in the normal state.
            </summary>
        </member>
        <member name="F:Alternet.Common.ControlState.Disabled">
            <summary>
            Specifies that control is in the disabled state.
            </summary>
        </member>
        <member name="F:Alternet.Common.ControlState.Pressed">
            <summary>
            Specifies that control is in the pressed state.
            </summary>
        </member>
        <member name="F:Alternet.Common.ControlState.Hovered">
            <summary>
            Specifies that control is in the hovered state.
            </summary>
        </member>
        <member name="F:Alternet.Common.ControlState.Focused">
            <summary>
            Specifies that control is in the focused state.
            </summary>
        </member>
        <member name="F:Alternet.Common.ControlState.Default">
            <summary>
            Specifies that control is in the default state.
            </summary>
        </member>
        <member name="T:Alternet.Common.FontInfo">
            <summary>
            Represents information about a particular font.
            </summary>
        </member>
        <member name="M:Alternet.Common.FontInfo.#ctor(System.Drawing.Font,System.IntPtr)">
            <summary>
            Initializes a new instance of the <c>FontInfo</c> class with specified parameters.
            </summary>
            <param name="font">Specifies Font for this new instance.</param>
            <param name="dc">Handle to the device context.</param>
        </member>
        <member name="M:Alternet.Common.FontInfo.#ctor(System.IntPtr,System.IntPtr,System.String)">
            <summary>
            Initializes a new instance of the <c>FontInfo</c> class with specified parameters.
            </summary>
            <param name="fontHandle">Font handle.</param>
            <param name="dc">Handle to the device context.</param>
            <param name="fontName">Name of the font.</param>
        </member>
        <member name="M:Alternet.Common.FontInfo.Finalize">
            <summary>
            Destroys the instance of the <c>FontInfo</c> class.
            </summary>
        </member>
        <member name="P:Alternet.Common.FontInfo.Font">
            <summary>
            Gets or sets font of this <c>FontInfo</c>.
            </summary>
        </member>
        <member name="P:Alternet.Common.FontInfo.HFont">
            <summary>
            Represents handle to the <c>Font</c>.
            </summary>
        </member>
        <member name="P:Alternet.Common.FontInfo.FontWidth">
            <summary>
            Represents width of the font.
            </summary>
        </member>
        <member name="P:Alternet.Common.FontInfo.FontHeight">
            <summary>
            Represents height of the font.
            </summary>
        </member>
        <member name="P:Alternet.Common.FontInfo.IsMonoSpaced">
            <summary>
            Represents a value indicating whether font is monospaced, meaning that all characters drawn with this font have the same width.
            </summary>
        </member>
        <member name="P:Alternet.Common.FontInfo.FontName">
            <summary>
            Represents name of the font.
            </summary>
        </member>
        <member name="M:Alternet.Common.FontInfo.Clear">
            <summary>
            Frees all resources associated with this <c>FontInfo</c>.
            </summary>
        </member>
        <member name="T:Alternet.Common.FontInfos">
            <summary>
            Represents collection of FontInfo elements.
            </summary>
        </member>
        <member name="M:Alternet.Common.FontInfos.#ctor(System.Drawing.Font,System.IntPtr)">
            <summary>
            Initializes a new instance of the <c>FontInfos</c> class with specified parameters.
            </summary>
            <param name="font">Specifies Font for this new instance.</param>
            <param name="dc">Handle to the device context.</param>
        </member>
        <member name="M:Alternet.Common.FontInfos.#ctor(System.IntPtr,System.IntPtr)">
            <summary>
            Initializes a new instance of the <c>FontInfos</c> class with specified parameters.
            </summary>
            <param name="fontHandle">Specifies Font for this new instance.</param>
            <param name="dc">Handle to the device context.</param>
        </member>
        <member name="M:Alternet.Common.FontInfos.Finalize">
            <summary>
            Destroys the instance of the <c>FontInfos</c> class.
            </summary>
        </member>
        <member name="P:Alternet.Common.FontInfos.CurrentInfo">
            <summary>
            Represents current FontInfo object.
            </summary>
        </member>
        <member name="P:Alternet.Common.FontInfos.IsMonoSpaced">
            <summary>
            Represents a value indicating whether current font is monospaced.
            </summary>
        </member>
        <member name="P:Alternet.Common.FontInfos.FontHeight">
            <summary>
            Represents height of the current font.
            </summary>
        </member>
        <member name="M:Alternet.Common.FontInfos.GetAvailableFontStyle(System.Drawing.FontFamily,System.Drawing.FontStyle)">
            <summary>
            Indicates whether the specified System.Drawing.FontStyle enumeration is available.
            </summary>
            <param name="fontFamily">FontFamily to test.</param>
            <param name="desiredStyle">The System.Drawing.FontStyle to test.</param>
            <returns>The FontStyle available for specified FontFamily object.</returns>
        </member>
        <member name="M:Alternet.Common.FontInfos.Clear">
            <summary>
            Frees all resources associated with this <c>FontInfos</c>.
            </summary>
        </member>
        <member name="M:Alternet.Common.FontInfos.InitStyle(System.Drawing.FontStyle)">
            <summary>
            Adds specified style to the style collection.
            </summary>
            <param name="style">Style to add.</param>
            <returns>FontInfo that corresponds to the specified style.</returns>
        </member>
        <member name="M:Alternet.Common.FontInfos.InitStyle(System.String,System.Drawing.FontStyle,System.Int32)">
            <summary>
            Adds specified style to the style collection.
            </summary>
            <param name="fontName">Specifies Font Name.</param>
            <param name="style">Style to add.</param>
            <param name="fontHeight">Specifies Font Height.</param>
            <returns>FontInfo that corresponds to the specified style.</returns>
        </member>
        <member name="T:Alternet.Common.GdiFontInfo">
            <summary>
            Represents information about a particular Gdi font.
            </summary>
        </member>
        <member name="M:Alternet.Common.GdiFontInfo.#ctor(System.Drawing.Font,System.IntPtr)">
            <summary>
            Initializes a new instance of the <c>GdiFontInfo</c> class with specified parameters.
            </summary>
            <param name="font">Specifies Font for this new instance.</param>
            <param name="dc">Handle to the device context.</param>
        </member>
        <member name="M:Alternet.Common.GdiFontInfo.#ctor(System.IntPtr,System.IntPtr,System.String)">
            <summary>
            Initializes a new instance of the <c>GdiFontInfo</c> class with specified parameters.
            </summary>
            <param name="fontHandle">Font handle.</param>
            <param name="dc">Handle to the device context.</param>
            <param name="fontName">Name of the font.</param>
        </member>
        <member name="P:Alternet.Common.GdiFontInfo.UseDrawText">
            <summary>
            Indicates whether string width should be calculated using DrawText method rather then <c>CharWidth</c>.
            </summary>
        </member>
        <member name="M:Alternet.Common.GdiFontInfo.CharWidth(System.Char)">
            <summary>
            Calculates width of specified character using current <c>Font</c>.
            </summary>
            <param name="ch">Character to measure.</param>
            <returns>Width of the character.</returns>
        </member>
        <member name="M:Alternet.Common.GdiFontInfo.StringWidth(System.String)">
            <summary>
            Calculates width of specified string using current <c>Font</c>.
            </summary>
            <param name="s">String to measure.</param>
            <returns>Width of the text.</returns>
        </member>
        <member name="T:Alternet.Common.GdiFontInfos">
            <summary>
            Represents collection of GdiFontInfo elements.
            </summary>
        </member>
        <member name="M:Alternet.Common.GdiFontInfos.#ctor(System.Drawing.Font,System.IntPtr)">
            <summary>
            Initializes a new instance of the <c>GdiFontInfos</c> class with specified parameters.
            </summary>
            <param name="font">Specifies Font for this new instance.</param>
            <param name="dc">Handle to the device context.</param>
        </member>
        <member name="M:Alternet.Common.GdiFontInfos.#ctor(System.IntPtr,System.IntPtr)">
            <summary>
            Initializes a new instance of the <c>GdiFontInfos</c> class with specified parameters.
            </summary>
            <param name="fontHandle">Font handle.</param>
            <param name="dc">Handle to the device context.</param>
        </member>
        <member name="T:Alternet.Common.GdiPainter">
            <summary>
            Encapsulates a Gdi drawing surface, providing properties and methods used to draw text and graphic primitives.
            </summary>
        </member>
        <member name="P:Alternet.Common.GdiPainter.Handle">
            <summary>
            Gets handle to device context currently associated with the <c>IPainter</c>.
            </summary>
        </member>
        <member name="P:Alternet.Common.GdiPainter.UseDrawText">
            <summary>
            Indicates whether painter should use DrawText method rather then ExtTextOut to paint text.
            </summary>
        </member>
        <member name="P:Alternet.Common.GdiPainter.Transformation">
            <summary>
            Gets the world transformation for <c>Graphics</c> property.
            </summary>
        </member>
        <member name="P:Alternet.Common.GdiPainter.Graphics">
            <summary>
            Represents Graphics object used to paint text and graphic primitives.
            </summary>
        </member>
        <member name="M:Alternet.Common.GdiPainter.Clear">
            <summary>
            Resets all <c>GdiPainter</c> properties to the initial state.
            </summary>
        </member>
        <member name="M:Alternet.Common.GdiPainter.Transform(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Sets a two-dimensional linear transformation for the specified device context.
            </summary>
            <param name="x">Horizontal offset of the transformation.</param>
            <param name="y">Vertical offset of the transformation.</param>
            <param name="scaleX">Horizontal scale of the transformation.</param>
            <param name="scaleY">Vertical scale of the transformation.</param>
        </member>
        <member name="M:Alternet.Common.GdiPainter.EndTransform">
            <summary>
            Sets default two-dimensional linear transformation for the specified device context.
            </summary>
        </member>
        <member name="M:Alternet.Common.GdiPainter.BeginPaint(System.Drawing.Graphics)">
            <summary>
            Prepares the <c>GdiPainter</c> to paint. Associates new device context from given Graphics object to <c>GdiPainter</c> and preserves <c>GdiPainter</c> properties.
            <seealso cref="M:Alternet.Common.GdiPainter.EndPaint"/>
            </summary>
            <param name="graphics">The Graphics object to draw on.</param>
        </member>
        <member name="M:Alternet.Common.GdiPainter.EndPaint">
            <summary>
            Marks the end of painting. Releases device context associated with this <c>GdiPainter</c> and restores saved <c>GdiPainter</c> properties.
            <seealso cref="M:Alternet.Common.GdiPainter.BeginPaint(System.Drawing.Graphics)"/>
            </summary>
        </member>
        <member name="M:Alternet.Common.GdiPainter.StringWidth(System.String)">
            <summary>
            Returns width of the given string.
            </summary>
            <param name="text">The text to calculate width.</param>
            <returns>Width of specified string.</returns>
        </member>
        <member name="M:Alternet.Common.GdiPainter.StringWidth(System.String,System.Int32,System.Int32)">
            <summary>
            Returns width of the specified part of the given string.
            </summary>
            <param name="text">The text to calculate width.</param>
            <param name="pos">Position of the first character to start calculating.</param>
            <param name="len">Length of the part of string to calculate width.</param>
            <returns>Width of the part of string.</returns>
        </member>
        <member name="M:Alternet.Common.GdiPainter.StringWidth(System.String,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            Returns width of the given string fitting into the given Width.
            </summary>
            <param name="text">The text to calculate width.</param>
            <param name="width">Maximum layout area for the string.</param>
            <param name="count">Receives number of character fitting into specified Width.</param>
            <param name="exact">Specifies whether the calculating should be precise.</param>
            <returns>Width of the part of string.</returns>
        </member>
        <member name="M:Alternet.Common.GdiPainter.StringWidth(System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns width of the specified part of the given string fitting into the given Width.
            </summary>
            <param name="text">The text to calculate width.</param>
            <param name="pos">Position of the first character to start calculating.</param>
            <param name="len">Length of the part of string to calculate width.</param>
            <param name="width">Maximum layout area for the string.</param>
            <param name="count">Receives number of characters fitting into specified Width.</param>
            <returns>Width of the part of string.</returns>
        </member>
        <member name="M:Alternet.Common.GdiPainter.StringWidth(System.String,System.Int32,System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            Returns width of the specified part of the given string fitting into the given Width.
            </summary>
            <param name="text">The text to calculate width.</param>
            <param name="pos">Position of the first character to start calculating.</param>
            <param name="len">Length of the part of string to calculate width.</param>
            <param name="width">Maximum layout area for the string.</param>
            <param name="count">Receives number of characters fitting into the into the specified Width.</param>
            <param name="exact">Specifies whether the calculating should be precise.</param>
            <returns>Width of the part of string.</returns>
        </member>
        <member name="M:Alternet.Common.GdiPainter.CharWidth(System.Char,System.Int32)">
            <summary>
            Returns width of the given number of specified character.
            </summary>
            <param name="ch">Character to calculate width.</param>
            <param name="count">Number of characters.</param>
            <returns>Width of specified characters.</returns>
        </member>
        <member name="M:Alternet.Common.GdiPainter.CharWidth(System.Char,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            Returns width of the such number of the specified characters fitting into the given Width.
            </summary>
            <param name="ch">Character to calculate width.</param>
            <param name="width">The width that should hold a number of the specified character.</param>
            <param name="count">Receive number of character that can fit into specified width.</param>
            <param name="exact">Specifies whether the calculating should be precise.</param>
            <returns>Width of specified characters.</returns>
        </member>
        <member name="M:Alternet.Common.GdiPainter.FillRectangle(System.Drawing.Rectangle)">
            <summary>
            Fills the given rectangle by using the current brush.
            </summary>
            <param name="rect">The rectangle object to fill.</param>
        </member>
        <member name="M:Alternet.Common.GdiPainter.FillRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills the given rectangular area by using the current brush.
            </summary>
            <param name="x">X-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">Y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
        </member>
        <member name="M:Alternet.Common.GdiPainter.FillRectangle(System.Drawing.Color,System.Drawing.Rectangle)">
            <summary>
            Fills the given rectangle by using specified color.
            </summary>
            <param name="color">Specified color to fill rectangle.</param>
            <param name="rect">The rectangle object to fill.</param>
        </member>
        <member name="M:Alternet.Common.GdiPainter.FillRectangle(System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills the given rectangle by using specified color.
            </summary>
            <param name="color">Specified color to fill rectangle.</param>
            <param name="x">X-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">Y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
        </member>
        <member name="M:Alternet.Common.GdiPainter.FillPolygon(System.Drawing.Color,System.Drawing.Point[])">
            <summary>
            Fills the interior of a polygon defined by an array of points specified by Point structures.
            </summary>
            <param name="color">Specifies color to fill polygon.</param>
            <param name="points">Array of Point structures that represent the vertices of the polygon to fill.</param>
        </member>
        <member name="M:Alternet.Common.GdiPainter.FillGradient(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Fills the given rectangle with color that smoothly fades from one side to the other.
            </summary>
            <param name="rect">The rectangle object to fill.</param>
            <param name="beginColor">A Color structure that represents the starting color of the linear gradient.</param>
            <param name="endColor">A Color structure that represents the ending color of the linear gradient.</param>
            <param name="point1">A Point structure that represents the start point of the linear gradient.</param>
            <param name="point2">A Point structure that represents the end point of the linear gradient.</param>
        </member>
        <member name="M:Alternet.Common.GdiPainter.FillGradient(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Fills the given rectangle with color that smoothly fades from one side to the other.
            </summary>
            <param name="x">X-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">Y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
            <param name="beginColor">A Color structure that represents the starting color of the linear gradient.</param>
            <param name="endColor">A Color structure that represents the ending color of the linear gradient.</param>
            <param name="point1">A Point structure that represents the start point of the linear gradient.</param>
            <param name="point2">A Point structure that represents the end point of the linear gradient.</param>
        </member>
        <member name="M:Alternet.Common.GdiPainter.DrawThemeBackground(System.IntPtr,System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Draws the background image defined by the visual style for the specified control part.
            </summary>
            <param name="handle">Handle to a window's specified theme data.</param>
            <param name="partID">Specifies the part to draw.</param>
            <param name="stateID">Specifies the state of the part to draw.</param>
            <param name="rect">Specifies the rectangle, in logical coordinates, in which the background image is drawn.</param>
        </member>
        <member name="M:Alternet.Common.GdiPainter.DrawRectangle(System.Drawing.Rectangle)">
            <summary>
            Draws a border around the specified rectangle using current <c>BackColor</c>.
            </summary>
            <param name="rect">The rectangle object to draw border.</param>
        </member>
        <member name="M:Alternet.Common.GdiPainter.DrawRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a border around the specified rectangle using current <c>BackColor</c>.
            </summary>
            <param name="x">X-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">Y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
        </member>
        <member name="M:Alternet.Common.GdiPainter.DrawRoundRectangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a rectangle with rounded corners. The rectangle is outlined by using the current pen.
            </summary>
            <param name="left">Specifies the x-coordinate, in logical coordinates, of the upper-left corner of the rectangle.</param>
            <param name="top">Specifies the y-coordinate, in logical coordinates, of the upper-left corner of the rectangle.</param>
            <param name="right">Specifies the x-coordinate, in logical coordinates, of the lower-right corner of the rectangle.</param>
            <param name="bottom">Specifies the y-coordinate, in logical coordinates, of the lower-right corner of the rectangle.</param>
            <param name="width">Specifies the width, in logical coordinates, of the ellipse used to draw the rounded corners.</param>
            <param name="height">Specifies the height, in logical coordinates, of the ellipse used to draw the rounded corners.</param>
        </member>
        <member name="M:Alternet.Common.GdiPainter.FillRoundRectangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills a rectangle with rounded corners. The rectangle is outlined by using the current pen and filled by using the current brush.
            </summary>
            <param name="left">Specifies the x-coordinate, in logical coordinates, of the upper-left corner of the rectangle.</param>
            <param name="top">Specifies the y-coordinate, in logical coordinates, of the upper-left corner of the rectangle.</param>
            <param name="right">Specifies the x-coordinate, in logical coordinates, of the lower-right corner of the rectangle.</param>
            <param name="bottom">Specifies the y-coordinate, in logical coordinates, of the lower-right corner of the rectangle.</param>
            <param name="width">Specifies the width, in logical coordinates, of the ellipse used to draw the rounded corners.</param>
            <param name="height">Specifies the height, in logical coordinates, of the ellipse used to draw the rounded corners.</param>
        </member>
        <member name="M:Alternet.Common.GdiPainter.DrawFocusRect(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Draws a border around the specified rectangle using dot pattern.
            </summary>
            <param name="x">X-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">Y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
            <param name="color">Color of the frame.</param>
        </member>
        <member name="M:Alternet.Common.GdiPainter.DrawFocusRect(System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
            Draws a border around the specified rectangle using current <c>BackColor</c>.
            </summary>
            <param name="rect">The rectangle object to draw border.</param>
            <param name="color">Color of the frame.</param>
        </member>
        <member name="M:Alternet.Common.GdiPainter.StretchDrawImage(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Bitmap)">
            <summary>
            Draws stretched image in the specified rectangular area.
            </summary>
            <param name="rect">Base rect</param>
            <param name="stretchRect">Stretch rect</param>
            <param name="imageRect">Image rect</param>
            <param name="image">Specifies image to draw.</param>
        </member>
        <member name="M:Alternet.Common.GdiPainter.DrawImage(System.Windows.Forms.ImageList,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Draws specified image in the specified rectangular area.
            </summary>
            <param name="images">Image list that contains image to draw.</param>
            <param name="index">Index of image to draw within image list.</param>
            <param name="rect">Rectangle that bounds the drawing area for the image.</param>
        </member>
        <member name="M:Alternet.Common.GdiPainter.DrawImage(System.Windows.Forms.ImageList,System.Int32,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)">
            <summary>
            Draws specified image in the specified rectangular area.
            </summary>
            <param name="images">Image list that contains image to draw.</param>
            <param name="index">Index of image to draw within image list.</param>
            <param name="rect">Rectangle that bounds the drawing area for the image.</param>
            <param name="srcX">X-coordinate of the upper-left corner of the portion of the source image to be drawn.</param>
            <param name="srcY">Y-coordinate of the upper-left corner of the portion of the source image to be drawn.</param>
            <param name="srcWidth">Width of the portion of the source image to be drawn.</param>
            <param name="srcHeight">Height of the portion of the source image to be drawn.</param>
            <param name="srcUnit">Specifies the unit of measure for the image.</param>
            <param name="imageAttr">Specifies the color and size attributes of the image to be drawn.</param>
        </member>
        <member name="M:Alternet.Common.GdiPainter.DrawLine(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a line from the given start position up to, but not including, the specified end point.
            </summary>
            <param name="x1">X-coordinate of the line's start point.</param>
            <param name="y1">Y-coordinate of the line's start point.</param>
            <param name="x2">X-coordinate of the line's ending point.</param>
            <param name="y2">Y-coordinate of the line's ending point.</param>
        </member>
        <member name="M:Alternet.Common.GdiPainter.DrawLine(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Int32,System.Drawing.Drawing2D.DashStyle)">
            <summary>
            Draws a line from the given start position up to, but not including, the specified end point.
            </summary>
            <param name="x1">X-coordinate of the line's start point.</param>
            <param name="y1">Y-coordinate of the line's start point.</param>
            <param name="x2">X-coordinate of the line's ending point.</param>
            <param name="y2">Y-coordinate of the line's ending point.</param>
            <param name="color">Specifies color of the Pen object to draw line.</param>
            <param name="width">Specifies width of the Pen object to draw line.</param>
            <param name="penStyle">Specifies style of the Pen object to draw line.</param>
        </member>
        <member name="M:Alternet.Common.GdiPainter.DrawDotLine(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            Draws a dotted line from the given start position up to the specified end point.
            </summary>
            <param name="x1">X-coordinate of the line's start point.</param>
            <param name="y1">Y-coordinate of the line's start point.</param>
            <param name="x2">X-coordinate of the line's ending point.</param>
            <param name="y2">Y-coordinate of the line's ending point.</param>
            <param name="color1">Specifies line color.</param>
            <param name="color2">Specifies background color.</param>
            <param name="size">Specifies dot size</param>
        </member>
        <member name="M:Alternet.Common.GdiPainter.DrawEdge(System.Drawing.Rectangle@,System.Windows.Forms.Border3DStyle,System.Windows.Forms.Border3DSide,System.Int32)">
            <summary>
            Draws one or more edges of rectangle.
            </summary>
            <param name="rect">Specifies rectangle which edges should be drawn.</param>
            <param name="border">Specifies the style of a three-dimensional border.</param>
            <param name="sides">Specifies the sides of a rectangle to draw.</param>
            <param name="flags">Additional flags (used for internal purposes).</param>
        </member>
        <member name="M:Alternet.Common.GdiPainter.DrawEdge(System.Drawing.Rectangle@,System.Windows.Forms.Border3DStyle,System.Windows.Forms.Border3DSide)">
            <summary>
            Draws one or more edges of rectangle.
            </summary>
            <param name="rect">Specifies rectangle which edges should be drawn.</param>
            <param name="border">Specifies the style of a three-dimensional border.</param>
            <param name="sides">Specifies the sides of a rectangle to draw.</param>
        </member>
        <member name="M:Alternet.Common.GdiPainter.DrawWave(System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
            Draws waved line in the specified rectangular area.
            </summary>
            <param name="rect">Rectangle that bounds the drawing area for the wave.</param>
            <param name="color">Color used to draw wave.</param>
        </member>
        <member name="M:Alternet.Common.GdiPainter.DrawPolygon(System.Drawing.Point[],System.Drawing.Color)">
            <summary>
            Draws a polygon defined by an array of Point structures.
            </summary>
            <param name="points">Array of Point structures that represent the vertices of the polygon.</param>
            <param name="color">Specifies color of the polygon.</param>
        </member>
        <member name="M:Alternet.Common.GdiPainter.TextOut(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws text in the specified location.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="len">Specifies the length of the string.</param>
            <param name="x">X-coordinate of the start text point.</param>
            <param name="y">Y-coordinate of the start text point.</param>
        </member>
        <member name="M:Alternet.Common.GdiPainter.TextOut(System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Draws text in the specified location.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="len">Specifies the length of the string.</param>
            <param name="x">X-coordinate of the start text point.</param>
            <param name="y">Y-coordinate of the start text point.</param>
            <param name="clipped">Specifies that text will be clipped to the rectangle.</param>
            <param name="opaque">Specifies that current background color should be used to fill the rectangle.</param>
        </member>
        <member name="M:Alternet.Common.GdiPainter.TextOut(System.String,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Draws text within the specified rectangle.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="len">Specifies the length of the string.</param>
            <param name="rect">Specifies the dimensions, in logical coordinates, of a rectangle that is used for clipping, opaquing, or both.</param>
        </member>
        <member name="M:Alternet.Common.GdiPainter.TextOut(System.String,System.Int32,System.Drawing.Rectangle,System.Boolean,System.Boolean)">
            <summary>
            Draws text within the specified rectangle.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="len">Specifies the length of the string.</param>
            <param name="rect">Specifies the dimensions, in logical coordinates, of a rectangle that is used for clipping, opaquing, or both.</param>
            <param name="clipped">Specifies that text will be clipped to the rectangle.</param>
            <param name="opaque">Specifies that current background color should be used to fill the rectangle.</param>
        </member>
        <member name="M:Alternet.Common.GdiPainter.TextOut(System.String,System.Int32,System.Drawing.Rectangle,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Draws text within the specified rectangle.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="len">Specifies the length of the string.</param>
            <param name="rect">Specifies the dimensions, in logical coordinates, of a rectangle that is used for clipping, opaquing, or both.</param>
            <param name="clipped">Specifies that text will be clipped to the rectangle.</param>
            <param name="opaque">Specifies that current background color should be used to fill the rectangle.</param>
            <param name="space">Specifies distance between origins of adjacent character cells.</param>
        </member>
        <member name="M:Alternet.Common.GdiPainter.TextOut(System.String,System.Int32,System.Drawing.Rectangle,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Draws text within the specified rectangle.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="len">Specifies the length of the string.</param>
            <param name="rect">Specifies the dimensions, in logical coordinates, of a rectangle that is used for clipping, opaquing, or both.</param>
            <param name="x">X-coordinate of the start text point.</param>
            <param name="y">Y-coordinate of the start text point.</param>
            <param name="clipped">Specifies that text will be clipped to the rectangle.</param>
            <param name="opaque">Specifies that current background color should be used to fill the rectangle.</param>
        </member>
        <member name="M:Alternet.Common.GdiPainter.TextOut(System.String,System.Int32,System.Drawing.Rectangle,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Draws text within the specified rectangle.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="len">Specifies the length of the string.</param>
            <param name="rect">Specifies the dimensions, in logical coordinates, of a rectangle that is used for clipping, opaquing, or both.</param>
            <param name="x">X-coordinate of the start text point.</param>
            <param name="y">Y-coordinate of the start text point.</param>
            <param name="clipped">Specifies that text will be clipped to the rectangle.</param>
            <param name="opaque">Specifies that current background color should be used to fill the rectangle.</param>
            <param name="space">Specifies distance between origins of adjacent character cells.</param>
        </member>
        <member name="M:Alternet.Common.GdiPainter.DrawText(System.String,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Draws text in the specified rectangle using current values of <c>TextColor</c> and <c>BackColor</c>.
            </summary>
            <param name="text">The text to be draw.</param>
            <param name="len">Specifies the length of the string.</param>
            <param name="rect">The layout area for drawing text.</param>
        </member>
        <member name="M:Alternet.Common.GdiPainter.IntersectClipRect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new clipping region from the intersection of the current clipping region and the specified rectangle.
            </summary>
            <param name="x">X-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">Y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
        </member>
        <member name="M:Alternet.Common.GdiPainter.ExcludeClipRect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new clipping region that consists of the existing clipping region minus the specified rectangle.
            </summary>
            <param name="x">X-coordinate, of the upper-left corner of the rectangle.</param>
            <param name="y">Y-coordinate, of the upper-left corner of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
        </member>
        <member name="M:Alternet.Common.GdiPainter.IntersectClipRect(System.Drawing.Rectangle)">
            <summary>
            Creates a new clipping region from the intersection of the current clipping region and the specified rectangle.
            </summary>
            <param name="rect">Rectangle to intersect.</param>
        </member>
        <member name="M:Alternet.Common.GdiPainter.ExcludeClipRect(System.Drawing.Rectangle)">
            <summary>
            Creates a new clipping region that consists of the existing clipping region minus the specified rectangle.
            </summary>
            <param name="rect">Rectangle to exclude.</param>
        </member>
        <member name="M:Alternet.Common.GdiPainter.SaveClip(System.Drawing.Rectangle)">
            <summary>
            Retrieves handle to clipping region saved from specified rectangle.
            </summary>
            <param name="rect">Rectangle to process.</param>
            <returns>Handle to clipping region.</returns>
        </member>
        <member name="M:Alternet.Common.GdiPainter.RestoreClip(System.IntPtr)">
            <summary>
            Restores current clipping region from previously saved region.
            </summary>
            <param name="rgn">Specifies handle to the previously saved clipping region.</param>
        </member>
        <member name="T:Alternet.Common.GraphicsExtensions">
            <summary>
            Contains extended functionality for drawing surface.
            </summary>
        </member>
        <member name="M:Alternet.Common.GraphicsExtensions.DrawRectangleAlignedInside(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.Rectangle)">
            <summary>
            Draws a rectangle aligned accordingly to the pen width.
            </summary>
            <param name="graphics">A System.Drawing.Graphics to be drawn on.</param>
            <param name="pen">A System.Drawing.Pen that determines the color, width, and style of the rectangle.</param>
            <param name="rect">A System.Drawing.Rectangle structure that represents the rectangle to draw.</param>
        </member>
        <member name="M:Alternet.Common.GraphicsExtensions.DrawAlignedImage(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.ContentAlignment)">
            <summary>
            Draws the specified System.Drawing.Image, using its original physical size, with specified alignment.
            </summary>
            <param name="graphics">Surface to draw image on.</param>
            <param name="image">System.Drawing.Image to draw.</param>
            <param name="bounds">System.Drawing.Rectangle structure that specifies the location of the drawn image.</param>
            <param name="alignment">Image alignment.</param>
        </member>
        <member name="T:Alternet.Common.Painter">
            <summary>
            Encapsulates a drawing surface, providing properties and methods used to draw text and graphic primitives.
            </summary>
        </member>
        <member name="M:Alternet.Common.Painter.#ctor">
            <summary>
            Initializes a new instance of the <c>Painter</c> class with default settings.
            </summary>
        </member>
        <member name="M:Alternet.Common.Painter.Finalize">
            <summary>
            Destroys the instance of the <c>Painter</c> class.
            </summary>
        </member>
        <member name="P:Alternet.Common.Painter.Font">
            <summary>
            Gets or sets font of the device context currently associated with the <c>Painter</c>.
            </summary>
        </member>
        <member name="P:Alternet.Common.Painter.FontStyle">
            <summary>
            Gets or sets font style of the device context currently associated with the <c>Painter</c>.
            </summary>
        </member>
        <member name="P:Alternet.Common.Painter.TextColor">
            <summary>
            Gets or sets text color of the device context currently associated with the <c>Painter</c>.
            </summary>
        </member>
        <member name="P:Alternet.Common.Painter.ForeColor">
            <summary>
            Gets or sets foreground color of the device context currently associated with the <c>Painter</c>.
            </summary>
        </member>
        <member name="P:Alternet.Common.Painter.BackColor">
            <summary>
            Gets or sets background color of the device context currently associated with the <c>Painter</c>.
            </summary>
        </member>
        <member name="P:Alternet.Common.Painter.Opaque">
            <summary>
            Gets or sets a boolean value indicating that background is filled with the current background color before the text is drawn.
            </summary>
        </member>
        <member name="P:Alternet.Common.Painter.StringFormat">
            <summary>
            Encapsulates text layout information and display manipulations for this <c>Painter</c>.
            </summary>
        </member>
        <member name="P:Alternet.Common.Painter.IsMonoSpaced">
            <summary>
            Represents a value indicating whether font of the device context currently associated with this <c>Painter</c> is monospaced, meaning that all characters drawn with this font have the same width.
            </summary>
        </member>
        <member name="P:Alternet.Common.Painter.FontWidth">
            <summary>
            Represents width of the font of the device context currently associated with the <c>Painter</c>.
            </summary>
        </member>
        <member name="P:Alternet.Common.Painter.FontHeight">
            <summary>
            Represents height of the font of the device context currently associated with the <c>Painter</c>.
            </summary>
        </member>
        <member name="P:Alternet.Common.Painter.LineHeight">
            <summary>
            When implemented by a class, represents height of the individual lines.
            </summary>
        </member>
        <member name="P:Alternet.Common.Painter.LineSpace">
            <summary>
            Represents additional height added to the height of the font.
            </summary>
        </member>
        <member name="M:Alternet.Common.Painter.Clear">
            <summary>
            Resets all <c>Painter</c> properties to the initial state.
            </summary>
        </member>
        <member name="M:Alternet.Common.Painter.SelectNativeFont(System.String,System.Drawing.FontStyle,System.Int32)">
            <summary>
            Selects font with specified parameters.
            </summary>
            <param name="fontName">The name of Font to select.</param>
            <param name="fontStyle">The FontStyle of Font to select.</param>
            <param name="fontHeight">The height of Font to select.</param>
        </member>
        <member name="M:Alternet.Common.Painter.Dispose">
            <summary>
            Disposes this <c>Painter</c> and frees resources associated with it.
            </summary>
        </member>
        <member name="T:Alternet.Common.PainterResources`5">
            <summary>
            Represents a base class holds various resources used in drawing surfaces. This class is abstract.
            </summary>
            <typeparam name="TBrushType">Type of System.Drawing.Brush resources stored in this class.</typeparam>
            <typeparam name="TPenType">Type of System.Drawing.Pen resources stored in this class.</typeparam>
            <typeparam name="TImageType">Type of System.Drawing.Image resources stored in this class.</typeparam>
            <typeparam name="TImageListType">Type of ImageListEx resources stored in this class.</typeparam>
            <typeparam name="TTextStyleType">Type of <c>TextStyle</c> resources stored in this class.</typeparam>
        </member>
        <member name="M:Alternet.Common.PainterResources`5.GetBrush(`0)">
            <summary>
            Finds stored Brush object accordingly to the specified type or creates a new one if necessary.
            </summary>
            <param name="type">Type of Brush to probe.</param>
            <returns>Stored Brush object.</returns>
        </member>
        <member name="M:Alternet.Common.PainterResources`5.GetPen(`1)">
            <summary>
            Finds stored Pen object accordingly to the specified type or creates a new one if necessary.
            </summary>
            <param name="type">Type of Pen to probe.</param>
            <returns>Stored Pen object.</returns>
        </member>
        <member name="M:Alternet.Common.PainterResources`5.GetTextStyle(`4)">
            <summary>
            Finds stored text style object accordingly to the specified type or creates a new one if necessary.
            </summary>
            <param name="type">Type of text style to probe.</param>
            <returns>Stored text style object.</returns>
        </member>
        <member name="M:Alternet.Common.PainterResources`5.GetImage(`2)">
            <summary>
            Finds stored Image object accordingly to the specified type or creates a new one if necessary.
            </summary>
            <param name="type">Type of Image to probe.</param>
            <returns>Stored Image object.</returns>
        </member>
        <member name="M:Alternet.Common.PainterResources`5.GetImageList(`3)">
            <summary>
            Finds stored ImageList object accordingly to the specified type or creates a new one if necessary.
            </summary>
            <param name="type">Type of ImageList to probe.</param>
            <returns>Stored ImageList object.</returns>
        </member>
        <member name="M:Alternet.Common.PainterResources`5.Dispose">
            <summary>
            Disposes this <c>PainterResources</c> and frees resources associated with it.
            </summary>
        </member>
        <member name="T:Alternet.Common.PainterResources`5.TextStyle">
            <summary>
            Represents a particular text style.
            </summary>
        </member>
        <member name="M:Alternet.Common.PainterResources`5.TextStyle.#ctor(System.Drawing.Font,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <c>TextStyle</c> class with specified settings.
            </summary>
            <param name="font">Font associated with this new object.</param>
            <param name="foreColor">Fore color associated with this new object.</param>
        </member>
        <member name="P:Alternet.Common.PainterResources`5.TextStyle.Font">
            <summary>
            Gets System.Drawing.Font associated with this <c>TextStyle</c>.
            </summary>
        </member>
        <member name="P:Alternet.Common.PainterResources`5.TextStyle.ForeColor">
            <summary>
            Gets System.Drawing.Color associated with this <c>TextStyle</c>.
            </summary>
        </member>
        <member name="T:Alternet.Common.PainterResources`5.ResourceDescription`1">
            <summary>
            Represents a base class contains resource description. This class is abstract.
            </summary>
            <typeparam name="TType">Type of object used as resource.</typeparam>
        </member>
        <member name="T:Alternet.Common.PainterResources`5.EmbeddedResourceDescription`1">
            <summary>
            Represents a base class contains embedded resource description.
            </summary>
            <typeparam name="TType">Type of object used as resource.</typeparam>
        </member>
        <member name="M:Alternet.Common.PainterResources`5.EmbeddedResourceDescription`1.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Initializes a new instance of the <c>EmbeddedResourceDescription</c> class with specified settings.
            </summary>
            <param name="assembly">An assembly where this resource stored.</param>
            <param name="resourceName">Name of the resource.</param>
        </member>
        <member name="P:Alternet.Common.PainterResources`5.EmbeddedResourceDescription`1.Assembly">
            <summary>
            Gets an assembly where this resource stored.
            </summary>
        </member>
        <member name="P:Alternet.Common.PainterResources`5.EmbeddedResourceDescription`1.ResourceName">
            <summary>
            Gets a name of the resource.
            </summary>
        </member>
        <member name="T:Alternet.Common.PainterResources`5.ImageDescription">
            <summary>
             Provides an embedded resource description for image objects.
            </summary>
        </member>
        <member name="M:Alternet.Common.PainterResources`5.ImageDescription.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Initializes a new instance of the <c>ImageDescription</c> class with specified settings.
            </summary>
            <param name="assembly">An assembly where this resource stored.</param>
            <param name="resourceName">Name of the resource.</param>
        </member>
        <member name="T:Alternet.Common.PainterResources`5.ImageListDescription">
            <summary>
             Provides an embedded resource description for image list objects.
            </summary>
        </member>
        <member name="M:Alternet.Common.PainterResources`5.ImageListDescription.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Initializes a new instance of the <c>ImageListDescription</c> class with specified settings.
            </summary>
            <param name="assembly">An assembly where this resource stored.</param>
            <param name="resourceName">Name of the resource.</param>
        </member>
        <member name="T:Alternet.Common.PainterResources`5.BrushDescription">
            <summary>
             Provides a base class for brush resource description. This class is abstract.
            </summary>
        </member>
        <member name="T:Alternet.Common.PainterResources`5.TextStyleDescription">
            <summary>
             Provides an embedded resource description for text style objects.
            </summary>
        </member>
        <member name="M:Alternet.Common.PainterResources`5.TextStyleDescription.#ctor(System.Drawing.FontFamily,System.Single,System.Drawing.FontStyle,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <c>TextStyleDescription</c> class with specified settings.
            </summary>
            <param name="familyName">The FontFamily name associated with this text style.</param>
            <param name="emSize">The em-size of the font associated with this text style.</param>
            <param name="style">The FontStyle associated with this text style.</param>
            <param name="foreColor">The fore color associated with this text style.</param>
        </member>
        <member name="P:Alternet.Common.PainterResources`5.TextStyleDescription.FamilyName">
            <summary>
            Gets the FontFamily name associated with this text style.
            </summary>
        </member>
        <member name="P:Alternet.Common.PainterResources`5.TextStyleDescription.EmSize">
            <summary>
            Gets the em-size of the font associated with this text style.
            </summary>
        </member>
        <member name="P:Alternet.Common.PainterResources`5.TextStyleDescription.Style">
            <summary>
            Gets the FontStyle associated with this text style.
            </summary>
        </member>
        <member name="P:Alternet.Common.PainterResources`5.TextStyleDescription.ForeColor">
            <summary>
            Gets the Color associated with this text style.
            </summary>
        </member>
        <member name="T:Alternet.Common.PainterResources`5.SolidBrushDescription">
            <summary>
             Provides a resource description for brush objects.
            </summary>
        </member>
        <member name="M:Alternet.Common.PainterResources`5.SolidBrushDescription.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <c>SolidBrushDescription</c> class with specified settings.
            </summary>
            <param name="color">The color of this brush object.</param>
        </member>
        <member name="P:Alternet.Common.PainterResources`5.SolidBrushDescription.Color">
            <summary>
            Gets the color of this brush object.
            </summary>
        </member>
        <member name="T:Alternet.Common.PainterResources`5.PenDescription">
            <summary>
             Provides a base class for pen resource description. This class is abstract.
            </summary>
        </member>
        <member name="P:Alternet.Common.PainterResources`5.PenDescription.Width">
            <summary>
            Gets the width of this pen object, in units of the System.Drawing.Graphics object used for drawing.
            </summary>
        </member>
        <member name="T:Alternet.Common.PainterResources`5.SolidPenDescription">
            <summary>
             Provides a resource description for pen objects.
            </summary>
        </member>
        <member name="M:Alternet.Common.PainterResources`5.SolidPenDescription.#ctor(System.Drawing.Color,System.Int32)">
            <summary>
            Initializes a new instance of the <c>SolidPenDescription</c> class with specified settings.
            </summary>
            <param name="color">The color of this pen object.</param>
            <param name="width">The width of this pen object, in units of the System.Drawing.Graphics object used for drawing.</param>
        </member>
        <member name="P:Alternet.Common.PainterResources`5.SolidPenDescription.Color">
            <summary>
            Gets the color of this pen object.
            </summary>
        </member>
        <member name="T:Alternet.Common.XPThemeName">
            <summary>
            Represents color theme names.
            </summary>
        </member>
        <member name="F:Alternet.Common.XPThemeName.None">
            <summary>
            Defines that no color theme is available.
            </summary>
        </member>
        <member name="F:Alternet.Common.XPThemeName.Blue">
            <summary>
            Defines blue color theme.
            </summary>
        </member>
        <member name="F:Alternet.Common.XPThemeName.HomeStead">
            <summary>
            Defines HomeStead color theme.
            </summary>
        </member>
        <member name="F:Alternet.Common.XPThemeName.Metallic">
            <summary>
            Defines metallic color theme.
            </summary>
        </member>
        <member name="F:Alternet.Common.XPThemeName.Custom">
            <summary>
            Defines custom color theme.
            </summary>
        </member>
        <member name="T:Alternet.Common.XPThemes">
            <summary>
            This class provides functionality to draw control's background with various visual styles.
            </summary>
        </member>
        <member name="M:Alternet.Common.XPThemes.#cctor">
            <summary>
            Initializes a new instance of the <c>XPThemes</c> class with default settings.
            </summary>
        </member>
        <member name="P:Alternet.Common.XPThemes.CurrentTheme">
            <summary>
            Represents name of current color theme.
            </summary>
        </member>
        <member name="P:Alternet.Common.XPThemes.Offset">
            <summary>
            Sets the value that specifies two-dimensional shift matrix.
            </summary>
        </member>
        <member name="M:Alternet.Common.XPThemes.GetGroupCaptionColor(System.Boolean)">
            <summary>
            Returns color of the group caption with current color theme.
            </summary>
            <param name="hot">Specifies if the group is hot.</param>
            <returns>The Color structure that specifies color of the group caption.</returns>
        </member>
        <member name="M:Alternet.Common.XPThemes.GetGroupItemCaptionColor(System.Boolean)">
            <summary>
            Returns color of the group item caption with current color theme.
            </summary>
            <param name="hot">Specifies if the item is hot.</param>
            <returns>The Color structure that specifies color of the group item caption.</returns>
        </member>
        <member name="M:Alternet.Common.XPThemes.DrawGroupBackground(Alternet.Common.IPainter,System.Drawing.Rectangle)">
            <summary>
            Draws the group background within the specified rectangle with current theme.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="rect">The Rectangle that represents the dimensions of the group.</param>
        </member>
        <member name="M:Alternet.Common.XPThemes.DrawBackground(Alternet.Common.IPainter,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Draws the control background within the specified rectangle with current theme.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="rect">The Rectangle that represents the dimensions of the control.</param>
            <param name="startColor">Specifies start background color for gradient background painting when no theme is available.</param>
            <param name="endColor">Specifies end background color for gradient background painting when no theme is available.</param>
        </member>
        <member name="M:Alternet.Common.XPThemes.DrawRect(System.Drawing.Rectangle)">
            <summary>
            Returns the rectangle object displaced relatively specified rectangle object by <c>Offset</c> value.
            </summary>
            <param name="sourceRect">The source Rectangle object.</param>
            <returns>Offset rectangle.</returns>
        </member>
        <member name="M:Alternet.Common.XPThemes.DoneTheme">
            <summary>
            Destroys current theme before initialization new theme.
            </summary>
        </member>
        <member name="M:Alternet.Common.XPThemes.InitTheme">
            <summary>
            Initializes a new theme.
            </summary>
        </member>
        <member name="M:Alternet.Common.XPThemes.DrawEditBorder(Alternet.Common.IPainter,System.Drawing.Rectangle)">
            <summary>
            Draws border of edit control within the specified rectangle with current theme.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="rect">The Rectangle that represents the dimensions of the control.</param>
        </member>
        <member name="M:Alternet.Common.XPThemes.DrawEditBorder(System.IntPtr,System.Drawing.Rectangle)">
            <summary>
            Draws border of edit control within the specified rectangle with current theme.
            </summary>
            <param name="dc">Handle to a device context used for drawing the theme-defined background image.</param>
            <param name="rect">The Rectangle that represents the dimensions of the control.</param>
        </member>
        <member name="M:Alternet.Common.XPThemes.DrawPushButton(Alternet.Common.IPainter,System.Drawing.Rectangle,System.Boolean,System.Boolean)">
            <summary>
            Draws button within the specified rectangle with current theme.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="rect">The Rectangle that represents the dimensions of the control.</param>
            <param name="pressed">Specifies if the button is pressed.</param>
            <param name="hot">Specifies if the button is hot.</param>
        </member>
        <member name="M:Alternet.Common.XPThemes.DrawCheckBox(Alternet.Common.IPainter,System.Drawing.Rectangle,System.Boolean,System.Boolean)">
            <summary>
            Draws check box within the specified rectangle with current theme.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="rect">The Rectangle that represents the dimensions of the control.</param>
            <param name="pressed">Specifies if the button is pressed.</param>
            <param name="hot">Specifies if the button is hot.</param>
        </member>
        <member name="T:Alternet.Common.PathUtilities">
            <summary>
            An utility class for computing relative paths.
            </summary>
        </member>
        <member name="M:Alternet.Common.PathUtilities.MakeRelativePath(System.String,System.String)">
            <summary>
            Creates a relative path from one file or folder to another.
            </summary>
            <param name="fromPath">Contains the directory that defines the start of the relative path.</param>
            <param name="toPath">Contains the path that defines the endpoint of the relative path.</param>
            <returns>The relative path from the start directory to the end path or <c>toPath</c> if the paths are not related.</returns>
            <exception cref="T:System.ArgumentNullException">fromPath or toPath is null.</exception>
            <exception cref="T:System.UriFormatException">The URI is incorrectly formed.</exception>
            <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
        </member>
        <member name="M:Alternet.Common.PathUtilities.NormalizePathSeparators(System.String)">
            <summary>
            Replaces alternative separators by regular ones in given path.
            </summary>
            <param name="inputPath">Source path to probe.</param>
            <returns>Normalized path.</returns>
        </member>
        <member name="M:Alternet.Common.PathUtilities.GetFileNameWithoutAllExtensions(System.String)">
            <summary>
            Removes all extensions from the path, i.e "aaa.png.zip" -> "aaa"
            </summary>
        </member>
        <member name="M:Alternet.Common.PathUtilities.TryGetExactPath(System.String,System.String@)">
            <summary>
            Gets the exact case used on the file system for an existing file or directory.
            </summary>
            <param name="path">A relative or absolute path.</param>
            <param name="exactPath">The full path using the correct case if the path exists.  Otherwise, null.</param>
            <returns>True if the exact path was found.  False otherwise.</returns>
            <remarks>
            This supports drive-lettered paths and UNC paths, but a UNC root
            will be returned in title case (e.g., \\Server\Share).
            </remarks>
        </member>
        <member name="T:Alternet.Common.ProductInformation">
            <summary>
            Represent information about AlterNET product.
            </summary>
        </member>
        <member name="P:Alternet.Common.ProductInformation.ProductVersion">
            <summary>
            Gets <c>System.Version</c> info of the product.
            </summary>
        </member>
        <member name="T:Alternet.Common.Projects.DotNet.DotNetProject">
            <summary>
            Represents properties and methods used to store and manipulate Visual Studio project content.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.DotNet.DotNetProject.Parent">
            <summary>
            Gets or sets a <c>Project</c> that is a parent of this project.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.DotNet.DotNetProject.ProjectDependencies">
            <summary>
            Gets or sets list of project's dependencies.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.DotNet.DotNetProject.ProjectHostGuid">
            <summary>
            Gets or sets's project's host GUID.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.DotNet.DotNetProject.ProjectGuid">
            <summary>
            Gets or sets's project's GUID.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.DotNet.DotNetProject.RootNamespace">
            <summary>
            Gets project's root namespace.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.DotNet.DotNetProject.RelativePath">
            <summary>
            Gets or sets a relative file path of this project.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.DotNet.DotNetProject.References">
            <summary>
            Gets list of assemblies used in the project.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.DotNet.DotNetProject.ProjectReferences">
            <summary>
            Gets list of assemblies used in the project.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.DotNet.DotNetProject.ImportedNamespaces">
            <summary>
            Gets list of imported namespaces used in the project.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.DotNet.DotNetProject.AssemblyResources">
            <summary>
            Gets the list of the assembly (with Generator option) resources embedded into the project.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.DotNet.DotNetProject.DefaultExtension">
            <summary>
            Gets a default extension of the project's code files.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.DotNet.DotNetProject.ProjectExtension">
            <summary>
            Gets an extension of the this project.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.DotNet.DotNetProject.IsWpf">
            <summary>
            Gets a value indicating whether this is WPF project or not.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.DotNet.DotNetProject.IsSdkStyle">
            <summary>
            Gets a value indicating whether this is SDK-style.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.DotNet.DotNetProject.SolutionSettings">
            <summary>
            Gets a ProjectSolutionSettings for this project.
            </summary>
        </member>
        <member name="M:Alternet.Common.Projects.DotNet.DotNetProject.AllFiles(System.Boolean)">
            <summary>
            Gets list of files included in the project.
            </summary>
            <param name="includeProject">Specifies that result will include project file.</param>
        </member>
        <member name="M:Alternet.Common.Projects.DotNet.DotNetProject.Reset">
            <summary>
            Resets <c>Project</c> to the default state.
            </summary>
        </member>
        <member name="M:Alternet.Common.Projects.DotNet.DotNetProject.Load(System.String)">
            <summary>
            Loads project from specified source.
            </summary>
            <param name="projectFileName">Path to the project file.</param>
        </member>
        <member name="M:Alternet.Common.Projects.DotNet.DotNetProject.AddFile(System.String)">
            <summary>
            Adds specified code or resource file to the project.
            </summary>
            <param name="fileName">File to add.</param>
        </member>
        <member name="M:Alternet.Common.Projects.DotNet.DotNetProject.RemoveFile(System.String)">
            <summary>
            Removes specified file from the project.
            </summary>
            <param name="fileName">File to remove.</param>
        </member>
        <member name="M:Alternet.Common.Projects.DotNet.DotNetProject.AddReference(System.String,System.String)">
            <summary>
            Adds specified reference to the project.
            </summary>
            <param name="reference">Reference to add.</param>
            <param name="hintPath">HintPath to add.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.Projects.DotNet.DotNetProject.RemoveReference(System.String)">
            <summary>
            Removes specified reference from the project.
            </summary>
            <param name="reference">Reference to remove.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.Projects.DotNet.DotNetProject.TryResolveAbsolutePaths(System.Collections.Generic.IList{System.String})">
            <summary>
            Try to find real references name matches the given names.
            </summary>
            <param name="references">Lust of short reference name.</param>
            <returns>List of absolute reference names.</returns>
        </member>
        <member name="M:Alternet.Common.Projects.DotNet.DotNetProject.TryResolveAbsolutePath(System.String)">
            <summary>
            Try to find real reference name matches the given name.
            </summary>
            <param name="reference">Short reference name.</param>
            <returns>Absolute reference name.</returns>
        </member>
        <member name="T:Alternet.Common.Projects.DotNet.DotNetProject.ProjectSolutionSettings">
            <summary>
            Specifies solution settings related to the project.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.DotNet.DotNetProject.ProjectSolutionSettings.SolutionConfigurations">
            <summary>
            Gets or sets list of solution configurations.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.DotNet.DotNetProject.ProjectSolutionSettings.SolutionBuildProject">
            <summary>
            Gets or sets list of boolean values indicates whether the project should be built.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.DotNet.DotNetProject.ProjectSolutionSettings.Nodes">
            <summary>
            Gets or sets list of nested projects.
            </summary>
        </member>
        <member name="T:Alternet.Common.Projects.DotNet.DotNetProject.AssemblyReference">
            <summary>
            Represents an assembly reference stored in the assembly references list.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.DotNet.DotNetProject.AssemblyReference.Name">
            <summary>
            Gets or sets a name of the assembly reference.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.DotNet.DotNetProject.AssemblyReference.HintPath">
            <summary>
            Gets or sets a Hint path of the assembly reference.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.DotNet.DotNetProject.AssemblyReference.FullName">
            <summary>
            Gets or sets a full name of the assembly reference.
            </summary>
        </member>
        <member name="T:Alternet.Common.Projects.DotNet.DotNetProject.ProjectReference">
            <summary>
            Represents a project reference stored in the project references list.
            </summary>
        </member>
        <member name="M:Alternet.Common.Projects.DotNet.DotNetProject.ProjectReference.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>ProjectReference</c> class with specified name.
            </summary>
            <param name="name">Name of the project.</param>
        </member>
        <member name="M:Alternet.Common.Projects.DotNet.DotNetProject.ProjectReference.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>ProjectReference</c> class with specified parameters.
            </summary>
            <param name="name">Name of the project.</param>
            <param name="path">Path of the project.</param>
            <param name="guid">GUID of the project.</param>
        </member>
        <member name="P:Alternet.Common.Projects.DotNet.DotNetProject.ProjectReference.ProjectName">
            <summary>
            Gets or sets name of the project.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.DotNet.DotNetProject.ProjectReference.ProjectPath">
            <summary>
            Gets or sets Path of the project.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.DotNet.DotNetProject.ProjectReference.ProjectGUID">
            <summary>
            Gets or sets GUID of the project.
            </summary>
        </member>
        <member name="M:Alternet.Common.Projects.DotNet.DotNetProject.FileAttribute.OnChanged(System.EventArgs)">
            <summary>
            Raises the <c>Changed</c> event.
            </summary>
            <param name="args">The EventArgs that contains data to this event.</param>
        </member>
        <member name="T:Alternet.Common.Projects.DotNet.DotNetProjectExtension">
            <summary>
            Contains extended methods for <c>Alternet.Editor.Common.Project</c> class.
            </summary>
        </member>
        <member name="M:Alternet.Common.Projects.DotNet.DotNetProjectExtension.Save(Alternet.Common.Projects.DotNet.DotNetProject)">
            <summary>
            Saves the project to the file system, if modified.
            </summary>
            <param name="project">Project to save.</param>
        </member>
        <member name="M:Alternet.Common.Projects.DotNet.DotNetProjectExtension.Load(Alternet.Common.Projects.DotNet.DotNetProject,System.String,System.String)">
            <summary>
            Loads project from specified source.
            </summary>
            <param name="project">Project to load.</param>
            <param name="projectFileName">Path to the project file.</param>
            <param name="projectName">Project name.</param>
        </member>
        <member name="M:Alternet.Common.Projects.DotNet.DotNetProjectExtension.LoadXML(Alternet.Common.Projects.DotNet.DotNetProject,System.String)">
            <summary>
            Loads project from specified xml string.
            </summary>
            <param name="project">Project to load.</param>
            <param name="xml">Xml string with project content.</param>
        </member>
        <member name="M:Alternet.Common.Projects.DotNet.DotNetProjectExtension.LoadXML(Alternet.Common.Projects.DotNet.DotNetProject,System.Xml.XmlDocument)">
            <summary>
            Loads project from specified xml document.
            </summary>
            <param name="project">Project to load.</param>
            <param name="document">Xml document with project content.</param>
        </member>
        <member name="M:Alternet.Common.Projects.DotNet.DotNetProjectExtension.Create(Alternet.Common.Projects.DotNet.DotNetProject,Alternet.Common.Projects.ProjectCreationData,System.String)">
            <summary>
            Creates new template project and saves it to the file system.
            </summary>
            <param name="project">Project to load.</param>
            <param name="projectData">Data of the project.</param>
            <param name="basePath">Relative path to the template project file.</param>
            <returns>Full project name.</returns>
        </member>
        <member name="M:Alternet.Common.Projects.DotNet.DotNetProjectExtension.Load(Alternet.Common.Projects.Project.ProjectUserSettings,System.String)">
            <summary>
            Loads project's settings from specified file.
            </summary>
            <param name="settings">Project settings to load.</param>
            <param name="settingsFileName">Name of file contained project settings.</param>
        </member>
        <member name="M:Alternet.Common.Projects.DotNet.DotNetProjectExtension.Save(Alternet.Common.Projects.Project.ProjectUserSettings)">
            <summary>
            Saves project's settings to the file system, if modified.
            </summary>
        </member>
        <member name="T:Alternet.Common.Projects.DotNet.DotNetSolution">
            <summary>
            Represents properties and methods used to store and manipulate Visual Studio solution content.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.DotNet.DotNetSolution.FileFormatVersion">
            <summary>
            Gets or sets solution's file format version.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.DotNet.DotNetSolution.VisualStudioVersion">
            <summary>
            Gets or sets solution's version.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.DotNet.DotNetSolution.MinimumVisualStudioVersion">
            <summary>
            Gets or sets solution's minimum version.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.DotNet.DotNetSolution.SolutionGuid">
            <summary>
            Solution GUID.
            Mandatory starting from Visual studio 2017.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.DotNet.DotNetSolution.SolutionFileName">
            <summary>
            Gets fully qualified name of the solution file.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.DotNet.DotNetSolution.Configurations">
            <summary>
            List of solution's configurations.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.DotNet.DotNetSolution.SolutionName">
            <summary>
            Gets or sets solution's name.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.DotNet.DotNetSolution.Version">
            <summary>
            Gets solution version.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.DotNet.DotNetSolution.Projects">
            <summary>
            Gets list of projects included in the solution.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.DotNet.DotNetSolution.IsModified">
            <summary>
            Gets or sets a value indicating whether project content has been modified since last save.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.DotNet.DotNetSolution.Files">
            <summary>
            Gets list of files included in the all projects within the solution.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.DotNet.DotNetSolution.IsEmpty">
            <summary>
            Gets a value indicating whether solution contains some data.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.DotNet.DotNetSolution.HasProjects">
            <summary>
            Gets a value indicating whether solution contains some project or folder.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.DotNet.DotNetSolution.DefaultProject">
            <summary>
            Gets or sets main project in the solution.
            </summary>
        </member>
        <member name="M:Alternet.Common.Projects.DotNet.DotNetSolution.AllFiles(System.Boolean)">
            <summary>
            Gets list of files included in the solution.
            </summary>
            <param name="includeProjects">Specifies that result will include project files.</param>
        </member>
        <member name="M:Alternet.Common.Projects.DotNet.DotNetSolution.Reset">
            <summary>
            Resets <c>Project</c> to the default state.
            </summary>
        </member>
        <member name="M:Alternet.Common.Projects.DotNet.DotNetSolution.AddProject(Alternet.Common.Projects.DotNet.DotNetProject)">
            <summary>
            Adds project to the solution.
            </summary>
            <param name="project">Project to add.</param>
        </member>
        <member name="M:Alternet.Common.Projects.DotNet.DotNetSolution.RemoveProject(Alternet.Common.Projects.DotNet.DotNetProject)">
            <summary>
            Removes project from the solution.
            </summary>
            <param name="project">Project to remove.</param>
        </member>
        <member name="T:Alternet.Common.Projects.DotNet.SolutionExtension">
            <summary>
            Contains extended methods for <c>Alternet.Editor.Common.Project</c> class.
            </summary>
        </member>
        <member name="M:Alternet.Common.Projects.DotNet.SolutionExtension.Load(Alternet.Common.Projects.DotNet.DotNetSolution,System.String)">
            <summary>
            Loads solution from specified source.
            </summary>
            <param name="solution">Solution to load.</param>
            <param name="solutionFileName">Path to the solution file.</param>
        </member>
        <member name="M:Alternet.Common.Projects.DotNet.SolutionExtension.Save(Alternet.Common.Projects.DotNet.DotNetSolution)">
            <summary>
            Saves solution to the file system, if modified.
            </summary>
        </member>
        <member name="E:Alternet.Common.Projects.Project.ProjectModified">
            <summary>
            Occurs when project content was modified.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.Project.ProjectFileName">
            <summary>
            Gets fully qualified name of the project file.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.Project.ProjectName">
            <summary>
            Gets or sets project's name.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.Project.IsFolder">
            <summary>
            Gets or sets a boolean value indicates whether this <c>Project</c> represents a folder within project collection.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.Project.IsModified">
            <summary>
            Gets or sets a value indicating whether project content has been modified since last save.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.Project.Files">
            <summary>
            Gets list of files included in the project.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.Project.Resources">
            <summary>
            Gets the list of the resources embedded into the project.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.Project.UserSettings">
            <summary>
            Gets user defined settings for this project.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.Project.HasProject">
            <summary>
            Gets a value indicating whether project contains some data.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.Project.DefaultExtension">
            <summary>
            Gets a default extension of the project's code files.
            </summary>
        </member>
        <member name="M:Alternet.Common.Projects.Project.BeginUpdate">
            <summary>
            Prevents project updating until calling <c>EndUpdate</c> method.
            </summary>
            <returns>Number of project updating locks.</returns>
        </member>
        <member name="M:Alternet.Common.Projects.Project.EndUpdate">
            <summary>
            Re-enables project updating, that was turn of by calling <c>BeginUpdate</c> method.
            </summary>
            <returns>Number of project updating locks.</returns>
        </member>
        <member name="M:Alternet.Common.Projects.Project.Reset">
            <summary>
            Resets <c>Project</c> to the default state.
            </summary>
        </member>
        <member name="M:Alternet.Common.Projects.Project.AddFile(System.String)">
            <summary>
            Adds specified code or resource file to the project.
            </summary>
            <param name="fileName">File to add.</param>
        </member>
        <member name="M:Alternet.Common.Projects.Project.RemoveFile(System.String)">
            <summary>
            Removes specified file from the project.
            </summary>
            <param name="fileName">File to remove.</param>
        </member>
        <member name="M:Alternet.Common.Projects.Project.AllFiles(System.Boolean)">
            <summary>
            Gets list of files included in the project.
            </summary>
            <param name="includeProject">Specifies that result will include project file.</param>
        </member>
        <member name="T:Alternet.Common.Projects.Project.ProjectUserSettings">
            <summary>
            This class is designed to hold user settings for the project.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.Project.ProjectUserSettings.SettingsFileName">
            <summary>
            Gets name of the file on the disk contained project's settings.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.Project.ProjectUserSettings.CommandLineArgs">
            <summary>
            Gets or sets an array of strings contained the command-line arguments for the project.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.Project.ProjectUserSettings.StartProgram">
            <summary>
            Gets or sets a name of external program used to run project.
            </summary>
        </member>
        <member name="P:Alternet.Common.Projects.Project.ProjectUserSettings.StartExternalProgram">
            <summary>
            Gets or sets a value indicating whether some external program should run the project.
            </summary>
        </member>
        <member name="M:Alternet.Common.Projects.Project.ProjectUserSettings.Reset">
            <summary>
            Resets <c>ProjectUserSettings</c> to the default state.
            </summary>
        </member>
        <member name="T:Alternet.Common.PropertyChangedEventArgs`1">
            <summary>
            Provides data for the ISyntaxEdit.SourceChanged event.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Alternet.Common.PropertyChangedEventArgs`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <c>PropertyChangedEventArgs</c> class with specified parameters.
            </summary>
            <param name="oldValue">Old property value.</param>
            <param name="newValue">New property value.</param>
        </member>
        <member name="P:Alternet.Common.PropertyChangedEventArgs`1.OldValue">
            <summary>
            Gets old property value.
            </summary>
        </member>
        <member name="P:Alternet.Common.PropertyChangedEventArgs`1.NewValue">
            <summary>
            Gets new property value.
            </summary>
        </member>
        <member name="T:Alternet.Common.RectangleExtensions">
            <summary>
            Contains extended functionality for System.Drawing.Rectangle objects.
            </summary>
        </member>
        <member name="M:Alternet.Common.RectangleExtensions.WithX(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Moves the location of given rectangle to the specified x-coordinate.
            </summary>
            <param name="rectangle">Rectangle to process.</param>
            <param name="x">New rectangle X position.</param>
            <returns>Rectangle object with new location.</returns>
        </member>
        <member name="M:Alternet.Common.RectangleExtensions.WithY(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Moves the location of given rectangle to the specified y-coordinate.
            </summary>
            <param name="rectangle">Rectangle to process.</param>
            <param name="y">New rectangle Y position.</param>
            <returns>Rectangle object with new location.</returns>
        </member>
        <member name="M:Alternet.Common.RectangleExtensions.WithOffset(System.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>
            Offsets the location of given rectangle by the specified offset.
            </summary>
            <param name="rectangle">Rectangle to process.</param>
            <param name="offsetX">Horizontal offset.</param>
            <param name="offsetY">Vertical offset.</param>
            <returns>Rectangle object with new location.</returns>
        </member>
        <member name="M:Alternet.Common.RectangleExtensions.WithOffset(System.Drawing.Rectangle,System.Drawing.Size)">
            <summary>
            Offsets the location of given rectangle by the specified offset.
            </summary>
            <param name="rectangle">Rectangle to process.</param>
            <param name="offset">Horizontal and vertical offset.</param>
            <returns>Rectangle object with new location.</returns>
        </member>
        <member name="M:Alternet.Common.RectangleExtensions.WithWidth(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Adjusts a given rectangle with the new width.
            </summary>
            <param name="rectangle">Rectangle to process.</param>
            <param name="width">New rectangle width.</param>
            <returns>Rectangle object with new width.</returns>
        </member>
        <member name="M:Alternet.Common.RectangleExtensions.WithHeight(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Adjusts a given rectangle with the new height.
            </summary>
            <param name="rectangle">Rectangle to process.</param>
            <param name="height">New rectangle height.</param>
            <returns>Rectangle object with new height.</returns>
        </member>
        <member name="M:Alternet.Common.RectangleExtensions.WithSize(System.Drawing.Rectangle,System.Drawing.Size)">
            <summary>
            Adjusts a given rectangle with the new size.
            </summary>
            <param name="rectangle">Rectangle to process.</param>
            <param name="size">New rectangle size.</param>
            <returns>Rectangle object with new size.</returns>
        </member>
        <member name="M:Alternet.Common.RectangleExtensions.WithLocation(System.Drawing.Rectangle,System.Drawing.Point)">
            <summary>
            Moves the location of given rectangle to the specified coordinates.
            </summary>
            <param name="rectangle">Rectangle to process.</param>
            <param name="location">New rectangle location.</param>
            <returns>Rectangle object with new location.</returns>
        </member>
        <member name="M:Alternet.Common.RectangleExtensions.LeftTop(System.Drawing.Rectangle)">
            <summary>
            Returns location of the upper-left corner of specified rectangle.
            </summary>
            <param name="r">Given rectangle.</param>
            <returns>Point that contains location of the upper-left rectangle corner.</returns>
        </member>
        <member name="M:Alternet.Common.RectangleExtensions.RightTop(System.Drawing.Rectangle)">
            <summary>
            Returns location of the upper-right corner of specified rectangle.
            </summary>
            <param name="r">Given rectangle.</param>
            <returns>Point that contains location of the upper-right rectangle corner.</returns>
        </member>
        <member name="M:Alternet.Common.RectangleExtensions.RightBottom(System.Drawing.Rectangle)">
            <summary>
            Returns location of the bottom-right corner of specified rectangle.
            </summary>
            <param name="r">Given rectangle.</param>
            <returns>Point that contains location of the bottom-right rectangle corner.</returns>
        </member>
        <member name="M:Alternet.Common.RectangleExtensions.LeftBottom(System.Drawing.Rectangle)">
            <summary>
            Returns location of the bottom-left corner of specified rectangle.
            </summary>
            <param name="r">Given rectangle.</param>
            <returns>Point that contains location of the bottom-left rectangle corner.</returns>
        </member>
        <member name="M:Alternet.Common.RectangleExtensions.Inflated(System.Drawing.Rectangle,System.Drawing.Size)">
            <summary>
            Inflates given rectangle by the specified size.
            </summary>
            <param name="rectangle">Given rectangle.</param>
            <param name="size">The amount to inflate this rectangle.</param>
            <returns>Rectangle object with new size.</returns>
        </member>
        <member name="M:Alternet.Common.RectangleExtensions.DeflatedWithPadding(System.Drawing.Rectangle,System.Windows.Forms.Padding)">
            <summary>
            Deflates given rectangle by the specified padding.
            </summary>
            <param name="r">Given rectangle.</param>
            <param name="p">System.Windows.Forms.Padding specifying amount to decrease this rectangle.</param>
            <returns>Rectangle object with new size.</returns>
        </member>
        <member name="M:Alternet.Common.RectangleExtensions.InflatedWithPadding(System.Drawing.Rectangle,System.Windows.Forms.Padding)">
            <summary>
            Inflates given rectangle by the specified padding.
            </summary>
            <param name="r">Given rectangle.</param>
            <param name="p">System.Windows.Forms.Padding specifying amount to increase this rectangle.</param>
            <returns>Rectangle object with new size.</returns>
        </member>
        <member name="M:Alternet.Common.RectangleExtensions.Inflated(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Inflates given rectangle by the specified amount.
            </summary>
            <param name="rectangle">Given rectangle.</param>
            <param name="amount">The amount to inflate this rectangle in vertical and horizontal direction.</param>
            <returns>Rectangle object with new size.</returns>
        </member>
        <member name="T:Alternet.Common.Result">
            <summary>
            Represents information about the success or failure of particular action.
            </summary>
        </member>
        <member name="P:Alternet.Common.Result.IsSuccess">
            <summary>
            Gets a value indicating whether action was succeed.
            </summary>
        </member>
        <member name="P:Alternet.Common.Result.ErrorMessage">
            <summary>
            Gets a message contains error information.
            </summary>
        </member>
        <member name="P:Alternet.Common.Result.IsFailure">
            <summary>
            Gets a value indicating whether action was failed.
            </summary>
        </member>
        <member name="M:Alternet.Common.Result.Fail(System.String)">
            <summary>
            Creates a new <c>Alternet.Common.Result</c> for unsuccessful action.
            </summary>
            <param name="message">Message describes reason of failure.</param>
            <returns>New <c>Alternet.Common.Result</c> object contains information about error.</returns>
        </member>
        <member name="M:Alternet.Common.Result.Fail``1(System.String)">
            <summary>
            Creates a new generic <c>Alternet.Common.Result</c> for unsuccessful action.
            </summary>
            <typeparam name="T">Type of object related to the action.</typeparam>
            <param name="message">Message describes reason of failure.</param>
            <returns>New <c>Alternet.Common.Result</c> object contains information about error.</returns>
        </member>
        <member name="M:Alternet.Common.Result.Ok">
            <summary>
            Creates a new <c>Alternet.Common.Result</c> for successful action.
            </summary>
            <returns>New <c>Alternet.Common.Result</c> object.</returns>
        </member>
        <member name="M:Alternet.Common.Result.Ok``1(``0)">
            <summary>
            Creates a new <c>Alternet.Common.Result</c> for successful action.
            </summary>
            <typeparam name="T">Type of object related to the action.</typeparam>
            <param name="value">An object that is result of the executed action.</param>
            <returns>New <c>Alternet.Common.Result</c> object.</returns>
        </member>
        <member name="M:Alternet.Common.Result.Combine(Alternet.Common.Result[])">
            <summary>
            Examines specified collection for the unsuccessful result.
            </summary>
            <param name="results">Array to probe.</param>
            <returns>First occurrence of the unsuccessful result if ones present in the array; otherwise OK result.</returns>
        </member>
        <member name="M:Alternet.Common.Result.OnSuccess(System.Func{Alternet.Common.Result})">
            <summary>
            Executes specified function if result represents successful action.
            </summary>
            <param name="func">Function to execute.</param>
            <returns>Current result if action was not succeed; otherwise result of executing specified function.</returns>
        </member>
        <member name="M:Alternet.Common.Result.OnSuccess(System.Action)">
            <summary>
            Executes specified function if result represents successful action.
            </summary>
            <param name="action">Function to execute.</param>
            <returns>Current result if action was not succeed; otherwise executes specified action and returns OK result.</returns>
        </member>
        <member name="M:Alternet.Common.Result.OnFailure(System.Action)">
            <summary>
            Executes specified function if result represents unsuccessful action.
            </summary>
            <param name="action">Function to execute.</param>
            <returns>Current result.</returns>
        </member>
        <member name="M:Alternet.Common.Result.OnFailure(System.Action{Alternet.Common.Result})">
            <summary>
            Executes specified function to update result of the executed action if result represents unsuccessful action.
            </summary>
            <param name="action">Function to execute.</param>
            <returns>Updated result.</returns>
        </member>
        <member name="M:Alternet.Common.Result.OnBoth(System.Action{Alternet.Common.Result})">
            <summary>
            Executes specified function to update result of the executed action.
            </summary>
            <param name="action">Function to execute.</param>
            <returns>Updated result.</returns>
        </member>
        <member name="T:Alternet.Common.Result`1">
            <summary>
            Provides generic version of <c>Alternet.Common.Result</c>.
            </summary>
            <typeparam name="T">Type of object related to the action.</typeparam>
        </member>
        <member name="P:Alternet.Common.Result`1.Value">
            <summary>
            Gets an object that is result of the executed action.
            </summary>
        </member>
        <member name="M:Alternet.Common.Result`1.OnSuccess(System.Action{`0})">
            <summary>
            Executes specified function if result represents successful action.
            </summary>
            <param name="action">Function to execute.</param>
            <returns>Current result if action was not succeed; otherwise executes specified action and returns OK result.</returns>
        </member>
        <member name="M:Alternet.Common.Result`1.OnSuccess(System.Func{`0})">
            <summary>
            Executes specified function if result represents successful action.
            </summary>
            <param name="func">Function to execute.</param>
            <returns>Current result if action was not succeed; otherwise result of executing specified function.</returns>
        </member>
        <member name="M:Alternet.Common.Result`1.OnFailure(System.Action{Alternet.Common.Result{`0}})">
            <summary>
            Executes specified function to update result of the executed action if result represents unsuccessful action.
            </summary>
            <param name="action">Function to execute.</param>
            <returns>Current result.</returns>
        </member>
        <member name="M:Alternet.Common.Result`1.OnSuccess(System.Func{Alternet.Common.Result{`0}})">
            <summary>
            Executes specified function if result represents successful action.
            </summary>
            <param name="func">Function to execute.</param>
            <returns>Current result if action was not succeed; otherwise result of executing specified function.</returns>
        </member>
        <member name="M:Alternet.Common.Result`1.OnSuccess(System.Func{`0,Alternet.Common.Result})">
            <summary>
            Executes specified function if result represents successful action.
            </summary>
            <param name="func">Function to execute.</param>
            <returns>Current result if action was not succeed; otherwise result of executing specified function.</returns>
        </member>
        <member name="M:Alternet.Common.Result`1.OnBoth(System.Func{Alternet.Common.Result,`0})">
            <summary>
            Executes specified function to update result of the executed action.
            </summary>
            <param name="func">Function to execute.</param>
            <returns>Updated result.</returns>
        </member>
        <member name="T:Alternet.Common.FileRange">
            <summary>
            Represents a location in source code.
            </summary>
        </member>
        <member name="M:Alternet.Common.FileRange.#ctor(System.Drawing.Point,System.Drawing.Point,System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>FileRange</c> class with specified parameters.
            </summary>
            <param name="startPoint">Start of <c>IRange</c> area.</param>
            <param name="endPoint">End of <c>IRange</c> area.</param>
            <param name="fileName">Specifies the full name of the source document file.</param>
            <param name="sourceText">Specifies string inside this location.</param>
        </member>
        <member name="P:Alternet.Common.FileRange.FileName">
            <summary>
            Gets the text line inside the file.
            </summary>
        </member>
        <member name="P:Alternet.Common.FileRange.SourceText">
            <summary>
            Gets string inside this location.
            </summary>
        </member>
        <member name="T:Alternet.Common.Range">
            <summary>
            Represents an pair of two points that defines a scope in a two-dimensional plane.
            </summary>
        </member>
        <member name="M:Alternet.Common.Range.InsideRange(System.Drawing.Point,System.Drawing.Rectangle)">
            <summary>
            Indicates whether specified rectangle contains given position.
            </summary>
            <param name="pt">Position to check-up.</param>
            <param name="rect">Rectangular area to check-up.</param>
            <returns>True if specified rect contains given Point; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.Range.InsideRange(System.Drawing.Point,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Indicates whether specified rectangle contains given position.
            </summary>
            <param name="pt">Position to check-up.</param>
            <param name="rect">Rectangular area to check-up.</param>
            <param name="checkMaxInt">Indicates that rectangle may contain Max Integer coordinates.</param>
            <returns>True if specified rect contains given Point; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.Range.UpdatePos(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Point@,System.Boolean)">
            <summary>
            Updates specified position by DeltaX and DeltaY values.
            </summary>
            <param name="x">Index of current character in the text.</param>
            <param name="y">Index of current line in the text.</param>
            <param name="deltaX">Horizontal displacement.</param>
            <param name="deltaY">Vertical displacement.</param>
            <param name="pt">Position to update.</param>
            <param name="endPos">Specifies whether position represents end of range.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.Range.UpdatePos(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            Updates specified position by DeltaX and DeltaY values.
            </summary>
            <param name="x">Index of current character in the text.</param>
            <param name="y">Index of current line in the text.</param>
            <param name="deltaX">Horizontal displacement.</param>
            <param name="deltaY">Vertical displacement.</param>
            <param name="ch">Horizontal constituent of the position to update.</param>
            <param name="ln">Vertical constituent of the position to update.</param>
            <param name="endPos">Specifies whether position represents end of range.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.Range.#ctor">
            <summary>
            Initializes a new instance of the <c>Range</c> class with default settings.
            </summary>
        </member>
        <member name="M:Alternet.Common.Range.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of the <c>Range</c> class with specified parameters.
            </summary>
            <param name="startPoint">Start of <c>Range</c> area.</param>
            <param name="endPoint">End of <c>Range</c> area.</param>
        </member>
        <member name="M:Alternet.Common.Range.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <c>Range</c> class with specified parameters.
            </summary>
            <param name="x1">X-coordinate of the start of <c>Range</c> area.</param>
            <param name="y1">Y-coordinate of the start of <c>Range</c> area.</param>
            <param name="x2">X-coordinate of the end of <c>Range</c> area.</param>
            <param name="y2">Y-coordinate of the end of <c>Range</c> area.</param>
        </member>
        <member name="P:Alternet.Common.Range.StartPoint">
            <summary>
            Gets or sets begin of <c>IRange</c> area.
            </summary>
        </member>
        <member name="P:Alternet.Common.Range.EndPoint">
            <summary>
            Gets or sets end of <c>IRange</c> area.
            </summary>
        </member>
        <member name="P:Alternet.Common.Range.Size">
            <summary>
            Gets or sets size of <c>IRange</c> area.
            </summary>
        </member>
        <member name="P:Alternet.Common.Range.IsEmpty">
            <summary>
            Gets boolean value indicating whether <c>IRange</c> has zero size.
            </summary>
        </member>
        <member name="M:Alternet.Common.Range.ShouldSerializeSize">
            <summary>
            Indicates whether the <c>Size</c> property should be persisted.
            </summary>
            <returns>Always returns false.</returns>
        </member>
        <member name="M:Alternet.Common.Range.Assign(Alternet.Common.IRange)">
            <summary>
            Copies contents from another <c>IRange</c> object.
            </summary>
        </member>
        <member name="M:Alternet.Common.Range.Clone">
            <summary>
            Creates a new object that is a copy of the current <c>IRange</c> object.
            </summary>
            <returns>A new instance of System.Object that is the memberwise clone of the current SortRange object.</returns>
        </member>
        <member name="T:Alternet.Common.RangeList">
            <summary>
            Represents sorted list of ranges.
            </summary>
        </member>
        <member name="M:Alternet.Common.RangeList.#ctor">
            <summary>
            Initializes a new instance of the <c>RangeList</c> class with default settings.
            </summary>
        </member>
        <member name="P:Alternet.Common.RangeList.TopRange">
            <summary>
            Represents top level range for this list.
            </summary>
        </member>
        <member name="P:Alternet.Common.RangeList.UpdateCount">
            <summary>
            Keeps track of calls to <c>BeginUpdate</c> and <c>EndUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="M:Alternet.Common.RangeList.UpdatePosition(Alternet.Common.IRange,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Updates specified position by DeltaX and DeltaY values for specific <c>IRange</c>.
            </summary>
            <param name="range"><c>IRange</c> to update.</param>
            <param name="x">Index of current character in the text.</param>
            <param name="y">Index of current line in the text.</param>
            <param name="deltaX">Horizontal displacement.</param>
            <param name="deltaY">Vertical displacement.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.RangeList.BlockDeleting(System.Drawing.Rectangle)">
            <summary>
            Removes all ranges from specified region.
            </summary>
            <param name="rect">Specifies rectangle to remove ranges from.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.RangeList.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Updates specified position by DeltaX and DeltaY values for any ranges in the collection.
            </summary>
            <param name="x">Index of current character in the text.</param>
            <param name="y">Index of current line in the text.</param>
            <param name="deltaX">Horizontal displacement.</param>
            <param name="deltaY">Vertical displacement.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.RangeList.Clear">
            <summary>
            Removes all ranges from <c>RangeList</c>.
            </summary>
        </member>
        <member name="M:Alternet.Common.RangeList.CopyFrom(System.Collections.Generic.IList{Alternet.Common.IRange})">
            <summary>
            Copies specified ranges to this <c>RangeList</c>.
            </summary>
            <param name="ranges">Source collection of ranges to copy from.</param>
        </member>
        <member name="M:Alternet.Common.RangeList.RemoveAt(System.Int32)">
            <summary>
            Removes the range at the specified index of the <c>RangeList</c>.
            </summary>
            <param name="index">The zero-based index of the range to remove.</param>
        </member>
        <member name="M:Alternet.Common.RangeList.Add(Alternet.Common.IRange)">
            <summary>
            Adds an object to the end of the range list.
            </summary>
            <param name="item">The range to be added to the end of range list.</param>
            <returns>Index of object that is added.</returns>
        </member>
        <member name="M:Alternet.Common.RangeList.FindRange(System.Drawing.Point)">
            <summary>
            Locates range at specified position.
            </summary>
            <param name="point">Position to locate range.</param>
            <returns><c>IRange</c> at the specified position.</returns>
        </member>
        <member name="M:Alternet.Common.RangeList.FindInclusiveRange(System.Int32,System.Boolean)">
            <summary>
            Locates range containing specific line.
            </summary>
            <param name="index">Position to locate range.</param>
            <returns><c>IRange</c> containing given line.</returns>
        </member>
        <member name="M:Alternet.Common.RangeList.FindRange(System.Int32)">
            <summary>
            Locates range at specified line.
            </summary>
            <param name="index">Index of line to locate range.</param>
            <returns><c>IRange</c> at specified line.</returns>
        </member>
        <member name="M:Alternet.Common.RangeList.FindExactRange(System.Drawing.Point)">
            <summary>
            Locates range at specified position and verifies whether it starts at the given position.
            </summary>
            <param name="point">Position to locate range.</param>
            <returns><c>IRange</c> if it starts at specified position; otherwise null.</returns>
        </member>
        <member name="M:Alternet.Common.RangeList.FindExactRange(System.Int32)">
            <summary>
            Locates range at specified line and verifies whether it starts at the given line.
            </summary>
            <param name="index">Index of line to locate range.</param>
            <returns><c>IRange</c> if it starts at specified line; otherwise null.</returns>
        </member>
        <member name="M:Alternet.Common.RangeList.RemoveRange(System.Drawing.Point)">
            <summary>
            Removes all ranges containing specified position.
            </summary>
            <param name="point">Position to remove ranges.</param>
        </member>
        <member name="M:Alternet.Common.RangeList.RemoveRange(System.Int32)">
            <summary>
            Removes all containing specified line.
            </summary>
            <param name="index">Index of line to remove ranges.</param>
        </member>
        <member name="M:Alternet.Common.RangeList.GetRanges(System.Collections.Generic.IList{Alternet.Common.IRange})">
            <summary>
            Fills list specified by Ranges parameter with all existing ranges.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <returns>Number of elements in the ranges collection.</returns>
        </member>
        <member name="M:Alternet.Common.RangeList.GetRanges">
            <summary>
            Returns ranges collection in the from of IList.
            </summary>
            <returns>IList representation of ranges collection.</returns>
        </member>
        <member name="M:Alternet.Common.RangeList.GetRanges(System.Collections.Generic.IList{Alternet.Common.IRange},System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Fills list specified by Ranges parameter with all ranges within specified range.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <param name="startpoint">Specifies start position in text coordinates.</param>
            <param name="endpoint">Specifies end position in text coordinates.</param>
            <returns>Number of elements in the ranges collection.</returns>
        </member>
        <member name="M:Alternet.Common.RangeList.GetRanges(System.Collections.Generic.IList{Alternet.Common.IRange},System.Drawing.Point)">
            <summary>
            Fills list specified by Ranges parameter with all ranges containing specific position.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <param name="point">Specifies position in text coordinates.</param>
            <returns>Number of elements in the ranges collection.</returns>
        </member>
        <member name="M:Alternet.Common.RangeList.GetExactRanges(System.Collections.Generic.IList{Alternet.Common.IRange},System.Int32)">
            <summary>
            Fills list specified by Ranges parameter with all ranges that starts at the specified line.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <param name="index">Specifies index of line.</param>
            <returns>Number of elements in the ranges collection.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Alternet.Common.RangeList.GetRanges(System.Collections.Generic.IList{Alternet.Common.IRange},System.Int32)" -->
        <member name="M:Alternet.Common.RangeList.Insert(System.Int32,Alternet.Common.IRange)">
            <summary>
            Inserts a range into the range list at the specified index.
            </summary>
            <param name="index">The zero-based index at which range should be inserted.</param>
            <param name="item">Specifies range to insert.</param>
        </member>
        <member name="M:Alternet.Common.RangeList.BeginUpdate">
            <summary>
            Prevents range list updating until calling <c>EndUpdate</c> method.
            </summary>
            <returns>Number of range list updating locks.</returns>
        </member>
        <member name="M:Alternet.Common.RangeList.EndUpdate(System.Boolean)">
            <summary>
            Re-enables range list updating, that was turn of by calling <c>BeginUpdate</c> method.
            </summary>
            <param name="update">If true, forces list updating.</param>
            <returns>Number of range list updating locks.</returns>
        </member>
        <member name="M:Alternet.Common.RangeList.EndUpdate">
            <summary>
            Re-enables range list updating, that was turn of by calling <c>BeginUpdate</c> method.
            </summary>
            <returns>Number of range list updating locks.</returns>
        </member>
        <member name="M:Alternet.Common.RangeList.Update">
            <summary>
            Updates <c>RangeList</c> content.
            </summary>
        </member>
        <member name="M:Alternet.Common.RangeList.Sort">
            <summary>
            Sorts <c>RangeList</c> content.
            </summary>
        </member>
        <member name="M:Alternet.Common.RangeList.Equals(System.Object)">
            <summary>
            Determines whether the specified <c>RangeList</c> is equal to the current <c>RangeList</c>.
            </summary>
            <param name="obj">The <c>RangeList</c> to compare with the current <c>RangeList</c>.</param>
            <returns>True if the specified <c>RangeList</c> is equal to the current <c>RangeList</c>; otherwise, false.</returns>
        </member>
        <member name="M:Alternet.Common.RangeList.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <c>RangeList</c>.</returns>
        </member>
        <member name="M:Alternet.Common.RangeList.TopSortRange.#ctor">
            <summary>
            Initializes a new instance of the <c>TopRange</c> class with default settings.
            </summary>
        </member>
        <member name="M:Alternet.Common.RangeList.TopSortRange.Contains(Alternet.Common.IRange)">
            <summary>
            Indicates whether the range container contains a specific <c>IRange</c> entry.
            </summary>
            <param name="range">The <c>IRange</c> to locate in the range list.</param>
            <returns>Always return true.</returns>
        </member>
        <member name="T:Alternet.Common.SortList`1">
            <summary>
            Represents sorted list of objects.
            </summary>
        </member>
        <member name="P:Alternet.Common.SortList`1.CompareIndex">
            <summary>
            Represents index of element that currently comparing.
            </summary>
        </member>
        <member name="P:Alternet.Common.SortList`1.Count">
            <summary>
            Gets the number of elements actually contained in the SortList.
            </summary>
        </member>
        <member name="M:Alternet.Common.SortList`1.InsideRange(System.Drawing.Point,System.Drawing.Rectangle)">
            <summary>
            Indicates whether specified rectangle contains given position.
            </summary>
            <param name="pt">Position to check-up.</param>
            <param name="rect">Rectangular area to check-up.</param>
            <returns>True if specified rect contains given Point; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.SortList`1.InsideRange(System.Drawing.Point,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Indicates whether specified rectangle contains given position.
            </summary>
            <param name="pt">Position to check-up.</param>
            <param name="rect">Rectangular area to check-up.</param>
            <param name="checkMaxInt">Indicates that rectangle may contain Max Integer coordinates.</param>
            <returns>True if specified rect contains given Point; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.SortList`1.UpdatePos(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Point@,System.Boolean)">
            <summary>
            Updates specified position by DeltaX and DeltaY values.
            </summary>
            <param name="x">Index of current character in the text.</param>
            <param name="y">Index of current line in the text.</param>
            <param name="deltaX">Horizontal displacement.</param>
            <param name="deltaY">Vertical displacement.</param>
            <param name="pt">Position to update.</param>
            <param name="endPos">Specifies whether position represents end of range.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.SortList`1.UpdatePos(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            Updates specified position by DeltaX and DeltaY values.
            </summary>
            <param name="x">Index of current character in the text.</param>
            <param name="y">Index of current line in the text.</param>
            <param name="deltaX">Horizontal displacement.</param>
            <param name="deltaY">Vertical displacement.</param>
            <param name="ch">Horizontal constituent of the position to update.</param>
            <param name="ln">Vertical constituent of the position to update.</param>
            <param name="endPos">Specifies whether position represents end of range.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.SortList`1.NeedSort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Determines if the list needs sorting based on given criteria.
            </summary>
            <param name="comparer">Comparer object to perform comparison between items in the list.</param>
            <returns>True if list has to be sorted; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.SortList`1.FindExact(`0,System.Int32@,System.Collections.Generic.IComparer{`0})">
            <summary>
            Finds the given object in the sorted list with assumption that sorted list do not have any duplicates.
            </summary>
            <param name="obj">Object to find.</param>
            <param name="index">Receive index of the found object in the sorted list.</param>
            <param name="comparer">Object that exposes a method to compare two objects.</param>
            <returns>True if the find succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.SortList`1.FindFirst(`0,System.Int32@,System.Collections.Generic.IComparer{`0})">
            <summary>
            Finds the first occurrence of the given object that satisfies searching criteria.
            </summary>
            <param name="obj">Object to find.</param>
            <param name="index">Receive index of the found object in the sorted list.</param>
            <param name="comparer">Object that exposes a method to compare two objects.</param>
            <returns>True if the find succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.SortList`1.FindLast(`0,System.Int32@,System.Collections.Generic.IComparer{`0})">
            <summary>
            Finds the last occurrence of the given object that satisfies searching criteria.
            </summary>
            <param name="obj">Object to find.</param>
            <param name="index">Receive index of the found object in the sorted list.</param>
            <param name="comparer">Object that exposes a method to compare two objects.</param>
            <returns>True if the find succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.SortList`1.FindExact(System.Object,System.Int32@,System.Collections.IComparer)">
            <summary>
            Finds the given object in the sorted list with assumption that sorted list do not have any duplicates.
            </summary>
            <param name="obj">Object to find.</param>
            <param name="index">Receive index of the found object in the sorted list.</param>
            <param name="comparer">Object that exposes a method to compare two objects.</param>
            <returns>True if the find succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.SortList`1.FindFirst(System.Object,System.Int32@,System.Collections.IComparer)">
            <summary>
            Finds the first occurrence of the given object that satisfies searching criteria.
            </summary>
            <param name="obj">Object to find.</param>
            <param name="index">Receive index of the found object in the sorted list.</param>
            <param name="comparer">Object that exposes a method to compare two objects.</param>
            <returns>True if the find succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.SortList`1.FindLast(System.Object,System.Int32@,System.Collections.IComparer)">
            <summary>
            Finds the last occurrence of the given object that satisfies searching criteria.
            </summary>
            <param name="obj">Object to find.</param>
            <param name="index">Receive index of the found object in the sorted list.</param>
            <param name="comparer">Object that exposes a method to compare two objects.</param>
            <returns>True if the find succeed; otherwise false.</returns>
        </member>
        <member name="T:Alternet.Common.SortRange">
            <summary>
            Represents a container for a sorted collection of <c>IRange</c> objects.
            </summary>
        </member>
        <member name="M:Alternet.Common.SortRange.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <c>SortRange</c> class with specified index.
            </summary>
            <param name="index">Index of this new instance within the top level ranges collection.</param>
        </member>
        <member name="M:Alternet.Common.SortRange.#ctor(Alternet.Common.IRange,System.Int32)">
            <summary>
            Initializes a new instance of the <c>SortRange</c> class with specified settings.
            </summary>
            <param name="range">Current <c>IRange</c> object.</param>
            <param name="index">Index of this new instance within the top level ranges collection.</param>
        </member>
        <member name="P:Alternet.Common.SortRange.Ranges">
            <summary>
            Represents collection of <c>IRange</c> objects stored in this range list.
            </summary>
        </member>
        <member name="P:Alternet.Common.SortRange.Index">
            <summary>
            Represents index of this <c>ISortRange</c> within the top level ranges collection.
            </summary>
        </member>
        <member name="P:Alternet.Common.SortRange.StartPoint">
            <summary>
            Gets or sets begin of <c>ISortRange</c> area.
            </summary>
        </member>
        <member name="P:Alternet.Common.SortRange.EndPoint">
            <summary>
            Gets or sets end of <c>ISortRange</c> area.
            </summary>
        </member>
        <member name="P:Alternet.Common.SortRange.Range">
            <summary>
            Represents current <c>IRange</c> object in the ranges list.
            </summary>
        </member>
        <member name="M:Alternet.Common.SortRange.Clear">
            <summary>
            Clears <c>IRange</c> collection.
            </summary>
        </member>
        <member name="M:Alternet.Common.SortRange.Contains(Alternet.Common.IRange)">
            <summary>
            Indicates whether the range container contains a specific <c>IRange</c> entry.
            </summary>
            <param name="range">The <c>IRange</c> to locate in the range list.</param>
            <returns>True if <c>IRange</c> entry is found; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.SortRange.Add(Alternet.Common.ISortRange)">
            <summary>
            Adds specific <c>ISortRange</c> to range list.
            </summary>
            <param name="range"><c>ISortRange</c> to add.</param>
            <returns>The position into which the new range was added.</returns>
        </member>
        <member name="M:Alternet.Common.SortRange.GetRanges(System.Collections.Generic.IList{Alternet.Common.IRange})">
            <summary>
            Fills list specified by Ranges parameter with this <c>ISortRange</c>.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
        </member>
        <member name="M:Alternet.Common.SortRange.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32,Alternet.Common.IRangeList,System.Collections.Generic.IComparer{Alternet.Common.IRange})">
            <summary>
            Updates specified position by DeltaX and DeltaY values for any ranges in the collection.
            </summary>
            <param name="x">Index of current character in the text.</param>
            <param name="y">Index of current line in the text.</param>
            <param name="deltaX">Horizontal displacement.</param>
            <param name="deltaY">Vertical displacement.</param>
            <param name="list">List to update.</param>
            <param name="comparer">Object that exposes a method to compare two objects.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.SortRange.BlockDeleting(System.Drawing.Rectangle,Alternet.Common.IRangeList,System.Collections.Generic.IComparer{Alternet.Common.IRange})">
            <summary>
            Removes all ranges from specified region.
            </summary>
            <param name="rect">Specifies rectangle to remove ranges from.</param>
            <param name="list">List to update.</param>
            <param name="comparer">Object that exposes a method to compare two objects.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.SortRange.Assign(Alternet.Common.IRange)">
            <summary>
            Copies contents from another <c>IRange</c> object.
            </summary>
        </member>
        <member name="M:Alternet.Common.SortRange.Clone">
            <summary>
            Creates a new object that is a copy of the current <c>ISortRange</c> object.
            </summary>
            <returns>A new instance of System.Object that is the memberwise clone of the current SortRange object.</returns>
        </member>
        <member name="T:Alternet.Common.StreamExtensions">
            <summary>
            Contains extension methods for Stream object.
            </summary>
        </member>
        <member name="M:Alternet.Common.StreamExtensions.GetAllBytes(System.IO.Stream)">
            <summary>
            Receives content of the specified input.
            </summary>
            <param name="input">Stream object to process.</param>
            <returns>Array of bytes representing content of the stream.</returns>
        </member>
        <member name="M:Alternet.Common.StreamExtensions.GetAllText(System.IO.Stream)">
            <summary>
            Receives content of the specified input.
            </summary>
            <param name="input">Stream object to process.</param>
            <returns>String representing content of the stream.</returns>
        </member>
        <member name="M:Alternet.Common.StreamExtensions.CreateStreamFromString(System.String)">
            <summary>
            Creates a Stream object that holds specified string.
            </summary>
            <param name="s">String to process.</param>
            <returns>Stream containing given string data.</returns>
        </member>
        <member name="T:Alternet.Common.StringConsts">
            <summary>
            Contains localizable string constants.
            </summary>
        </member>
        <member name="T:Alternet.Common.StringExtensions">
            <summary>
            Contains extended methods for string objects.
            </summary>
        </member>
        <member name="M:Alternet.Common.StringExtensions.ToPlainText(System.String)">
            <summary>
            Converts HTML-formatted string to the plain text.
            </summary>
            <param name="s">String to convert.</param>
            <returns>String without HTML tags.</returns>
        </member>
        <member name="M:Alternet.Common.StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Checks whether source string contains toCheck string.
            </summary>
            <param name="source">Source string to process.</param>
            <param name="toCheck">The string to seek.</param>
            <param name="comp">One of the enumeration values that specifies the rules for the search.</param>
            <returns>A value indicating whether specified string is a part of source string.</returns>
        </member>
        <member name="M:Alternet.Common.StringExtensions.Replace(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Returns a new string in which all occurrences of a specified string in the source string are replaced with another specified string.
            </summary>
            <param name="source">Source string to process.</param>
            <param name="oldString">The string to be replaced.</param>
            <param name="newString">The string to replace all occurrences of oldString.</param>
            <param name="comparison">One of the enumeration values that specifies the rules for the replacement.</param>
            <returns>A string that is equivalent to the source string except that all instances of oldString are replaced with newString.</returns>
        </member>
        <member name="M:Alternet.Common.StringExtensions.ToHtml(System.String)">
            <summary>
            Converts plain string to the HTML-formatted text.
            </summary>
            <param name="s">String to convert.</param>
            <returns>String with HTML tags.</returns>
        </member>
        <member name="T:Alternet.Common.SymbolLocation">
            <summary>
            Represents information about location of the code symbol.
            </summary>
        </member>
        <member name="P:Alternet.Common.SymbolLocation.FileName">
            <summary>
            Gets or sets name of file where symbol is located.
            </summary>
        </member>
        <member name="P:Alternet.Common.SymbolLocation.Column">
            <summary>
            Gets or sets column number of symbol.
            </summary>
        </member>
        <member name="P:Alternet.Common.SymbolLocation.Line">
            <summary>
            Gets or sets line number of symbol.
            </summary>
        </member>
        <member name="P:Alternet.Common.SymbolLocation.Symbol">
            <summary>
            Gets or sets a code symbol which location is represented by this <c>SymbolLocation</c>.
            </summary>
        </member>
        <member name="P:Alternet.Common.SymbolLocation.InSource">
            <summary>
            Gets boolean value, indicating if symbol is located within source file.
            </summary>
        </member>
        <member name="M:Alternet.Common.SymbolLocation.EqualsTo(Alternet.Common.SymbolLocation)">
            <summary>
            Returns true if symbol location is equal to the given object
            </summary>
            <param name="location">given symbol location</param>
            <returns>True if location is equal to the given object; otherwise false.</returns>
        </member>
        <member name="T:Alternet.Common.ThreadStaticList`1">
            <summary>
            This item supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Alternet.Common.ThreadStaticList`1.#ctor(System.Int32)">
            <summary>
            This item supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Alternet.Common.ThreadStaticList`1.Finalize">
            <summary>
            This item supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Alternet.Common.ThreadStaticList`1.IsDisposed">
            <summary>
            This item supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Alternet.Common.ThreadStaticList`1.Dispose">
            <summary>
            Disposes this <c>ThreadStaticList</c> and frees resources associated with it.
            </summary>
        </member>
        <member name="M:Alternet.Common.ThreadStaticList`1.Dispose(System.Boolean)">
            <summary>
            This item supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Alternet.Common.Utilities">
            <summary>
            An utility class to dispose object and resources.
            </summary>
        </member>
        <member name="M:Alternet.Common.Utilities.Dispose``1(``0@)">
            <summary>
            Disposes specified value and frees resources associated with it.
            </summary>
            <typeparam name="T">Type of object to dispose.</typeparam>
            <param name="value">A value to be disposed.</param>
        </member>
        <member name="M:Alternet.Common.Utilities.Dispose(System.IDisposable)">
            <summary>
            Disposes specified value and frees resources associated with it.
            </summary>
            <param name="value">IDisposable object to be disposed.</param>
        </member>
        <member name="T:Alternet.Common.HookHandler">
            <summary>
            Represents a method that will handle application-defined or library-defined callback function the system calls.
            </summary>
            <param name="ncode">Hook code.</param>
            <param name="wparam">Message identifier or current-process flag.</param>
            <param name="lparam">Address of structure with message data.</param>
        </member>
        <member name="T:Alternet.Common.EnumChildProc">
            <summary>
            Represents a method that will handle application-defined function used with the EnumWindows or EnumDesktopWindows functions.
            </summary>
            <param name="hwnd">Handle to a top-level window.</param>
            <param name="lparam">Specifies the application-defined value given in EnumWindows or EnumDesktopWindows.</param>
        </member>
        <member name="T:Alternet.Common.IControl">
            <summary>
            Represents standard control properties and methods.
            </summary>
        </member>
        <member name="E:Alternet.Common.IControl.Click">
            <summary>
            When implemented by a class, occurs when the control is clicked.
            </summary>
        </member>
        <member name="P:Alternet.Common.IControl.CanFocus">
            <summary>
            When implemented by a class, returns boolean value indicating whether the control can receive input focus.
            </summary>
        </member>
        <member name="P:Alternet.Common.IControl.Dock">
            <summary>
            When implemented by a class, gets or sets which control borders are docked to its parent control and determines how a control is resized with its parent.
            </summary>
        </member>
        <member name="P:Alternet.Common.IControl.Visible">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the control is displayed.
            </summary>
        </member>
        <member name="P:Alternet.Common.IControl.Location">
            <summary>
            When implemented by a class, gets or sets the coordinates of the upper-left corner of the control relative to the upper-left corner of its container.
            </summary>
        </member>
        <member name="P:Alternet.Common.IControl.Left">
            <summary>
            When implemented by a class, gets or sets the distance, in pixels, between the left edge of the control and the left edge of its container's client area.
            </summary>
        </member>
        <member name="P:Alternet.Common.IControl.Top">
            <summary>
            When implemented by a class, gets or sets the distance, in pixels, between the bottom edge of the control and the top edge of its container's client area.
            </summary>
        </member>
        <member name="P:Alternet.Common.IControl.Width">
            <summary>
            When implemented by a class, gets or sets the width of the control.
            </summary>
        </member>
        <member name="P:Alternet.Common.IControl.Height">
            <summary>
            When implemented by a class, gets or sets the height of the control.
            </summary>
        </member>
        <member name="P:Alternet.Common.IControl.Bounds">
            <summary>
            When implemented by a class, gets or sets the size and location of the control including its non-client elements.
            </summary>
        </member>
        <member name="P:Alternet.Common.IControl.ClientRectangle">
            <summary>
            When implemented by a class, gets the rectangle that represents the client area of the control.
            </summary>
        </member>
        <member name="P:Alternet.Common.IControl.ForeColor">
            <summary>
            When implemented by a class, gets or sets the foreground color of the control.
            </summary>
        </member>
        <member name="P:Alternet.Common.IControl.BackColor">
            <summary>
            When implemented by a class, gets or sets the background color for the control.
            </summary>
        </member>
        <member name="P:Alternet.Common.IControl.BackgroundImage">
            <summary>
            When implemented by a class, gets or sets the background image displayed in the control.
            </summary>
        </member>
        <member name="P:Alternet.Common.IControl.Font">
            <summary>
            When implemented by a class, gets or sets the font of the text displayed by the control.
            </summary>
        </member>
        <member name="P:Alternet.Common.IControl.Parent">
            <summary>
            When implemented by a class, gets or sets a reference to the server control's parent control in the page control hierarchy.
            </summary>
        </member>
        <member name="P:Alternet.Common.IControl.Focused">
            <summary>
            When implemented by a class, gets a value indicating whether the control has input focus.
            </summary>
        </member>
        <member name="P:Alternet.Common.IControl.Enabled">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the control can respond to user interaction.
            </summary>
        </member>
        <member name="P:Alternet.Common.IControl.Handle">
            <summary>
            When implemented by a class, gets the window handle that the control is bound to.
            </summary>
        </member>
        <member name="P:Alternet.Common.IControl.IsHandleCreated">
            <summary>
            When implemented by a class, gets a value indicating whether the control has a handle associated with it.
            </summary>
        </member>
        <member name="P:Alternet.Common.IControl.Created">
            <summary>
            When implemented by a class, gets a value indicating whether the control has been created.
            </summary>
        </member>
        <member name="P:Alternet.Common.IControl.ContextMenuStrip">
            <summary>
            When implemented by a class, gets or sets the ContextMenuStrip associated with this control.
            </summary>
        </member>
        <member name="M:Alternet.Common.IControl.CreateGraphics">
            <summary>
            When implemented by a class, creates the Graphics for the control.
            </summary>
            <returns>The Graphics for the control.</returns>
        </member>
        <member name="M:Alternet.Common.IControl.Invalidate">
            <summary>
            When implemented by a class, invalidates the entire client area of the control.
            </summary>
        </member>
        <member name="M:Alternet.Common.IControl.Invalidate(System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, invalidates a specific region of the control.
            </summary>
            <param name="rect">A Rectangle object that represents the region to invalidate.</param>
        </member>
        <member name="M:Alternet.Common.IControl.Invalidate(System.Drawing.Region)">
            <summary>
            When implemented by a class, invalidates a specific region of the control.
            </summary>
            <param name="region">The Region to invalidate.</param>
        </member>
        <member name="M:Alternet.Common.IControl.Invalidate(System.Drawing.Region,System.Boolean)">
            <summary>
            When implemented by a class, invalidates a specific region of the control.
            </summary>
            <param name="region">The Region to invalidate.</param>
            <param name="invalidateChildren">True to invalidate the control's child controls; otherwise, false.</param>
        </member>
        <member name="M:Alternet.Common.IControl.Refresh">
            <summary>
            When implemented by a class, causes the control to redraw the invalidated regions within its client area.
            </summary>
        </member>
        <member name="M:Alternet.Common.IControl.PointToClient(System.Drawing.Point)">
            <summary>
            When implemented by a class, computes the location of the specified screen point into client coordinates.
            </summary>
            <param name="p">The screen coordinate Point to convert.</param>
            <returns>A Point that represents the converted Point, in client coordinates.</returns>
        </member>
        <member name="M:Alternet.Common.IControl.PointToScreen(System.Drawing.Point)">
            <summary>
            When implemented by a class, computes the location of the specified client point into screen coordinates.
            </summary>
            <param name="p">The client coordinate Point to convert.</param>
            <returns>A Point that represents the converted Point, in screen coordinates.</returns>
        </member>
        <member name="M:Alternet.Common.IControl.Focus">
            <summary>
            When implemented by a class, sets input focus to the control.
            </summary>
            <returns>true if the input focus request was successful; otherwise, false.</returns>
        </member>
        <member name="M:Alternet.Common.IControl.FindForm">
            <summary>
            When implemented by a class, retrieves the form that the control is on.
            </summary>
            <returns>The Form that the control is on.</returns>
        </member>
        <member name="M:Alternet.Common.IControl.BringToFront">
            <summary>
            When implemented by a class, brings the control to the front of the z-order.
            </summary>
        </member>
        <member name="M:Alternet.Common.IControl.Invoke(System.Delegate)">
            <summary>
            When implemented by a class, executes the specified delegate on the thread that owns the control's underlying window handle.
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:Alternet.Common.IFileRange">
            <summary>
            Represents a location in source code.
            </summary>
        </member>
        <member name="P:Alternet.Common.IFileRange.FileName">
            <summary>
            When implemented by a class, gets the full name of the source file.
            </summary>
        </member>
        <member name="P:Alternet.Common.IFileRange.SourceText">
            <summary>
            When implemented by a class, gets the text line inside the file.
            </summary>
        </member>
        <member name="T:Alternet.Common.INotifier">
            <summary>
            Represents method that informs object about changes in linked objects.
            </summary>
        </member>
        <member name="M:Alternet.Common.INotifier.Notification(System.Object,System.EventArgs)">
            <summary>
            When implemented by a class, updates control's content according to the parameters of notification.
            </summary>
            <param name="sender">The source of the notification.</param>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="T:Alternet.Common.INotify">
            <summary>
            Represents properties and methods to manage notification between objects.
            </summary>
        </member>
        <member name="M:Alternet.Common.INotify.AddNotifier(Alternet.Common.INotifier)">
            <summary>
            When implemented by a class, adds new handler to respond a notification.
            </summary>
            <param name="sender">Specifies an object that can respond a notification.</param>
        </member>
        <member name="M:Alternet.Common.INotify.RemoveNotifier(Alternet.Common.INotifier)">
            <summary>
            When implemented by a class, exclude specified handler from notification handlers list.
            </summary>
            <param name="sender">Specifies an object that can respond a notification.</param>
        </member>
        <member name="M:Alternet.Common.INotify.Notify(System.EventArgs)">
            <summary>
            When implemented by a class, notifies all notifiers about updating object state.
            </summary>
        </member>
        <member name="T:Alternet.Common.IPainter">
            <summary>
            Encapsulates a drawing surface, providing properties and methods used to draw text and graphic primitives.
            </summary>
        </member>
        <member name="P:Alternet.Common.IPainter.Transformation">
            <summary>
            When implemented by a class gets the world transformation for <c>Graphics</c> property.
            </summary>
        </member>
        <member name="P:Alternet.Common.IPainter.Graphics">
            <summary>
            When implemented by a class, represents Graphics object used to paint.
            </summary>
        </member>
        <member name="P:Alternet.Common.IPainter.Font">
            <summary>
            When implemented by a class, gets or sets font of the device context currently associated with the <c>IPainter</c>.
            </summary>
        </member>
        <member name="P:Alternet.Common.IPainter.FontStyle">
            <summary>
            When implemented by a class, gets or sets font style of the device context currently associated with the <c>IPainter</c>.
            </summary>
        </member>
        <member name="P:Alternet.Common.IPainter.BackColor">
            <summary>
            When implemented by a class, gets or sets background color of the device context currently associated with the <c>IPainter</c>.
            </summary>
        </member>
        <member name="P:Alternet.Common.IPainter.ForeColor">
            <summary>
            When implemented by a class, gets or sets foreground color of the device context currently associated with the <c>IPainter</c>.
            </summary>
        </member>
        <member name="P:Alternet.Common.IPainter.TextColor">
            <summary>
            When implemented by a class, gets or sets text color of the device context currently associated with the <c>IPainter</c>.
            </summary>
        </member>
        <member name="P:Alternet.Common.IPainter.StringFormat">
            <summary>
            When implemented by a class, encapsulates text layout information and display manipulations for this <c>IPainter</c>.
            </summary>
        </member>
        <member name="P:Alternet.Common.IPainter.Opaque">
            <summary>
            When implemented by a class, gets or sets a boolean value indicating that background is filled with the current background color before the text is drawn.
            </summary>
        </member>
        <member name="P:Alternet.Common.IPainter.IsMonoSpaced">
            <summary>
            When implemented by a class, represents a value indicating whether font of the device context currently associated with this <c>IPainter</c> is monospaced, meaning that all characters drawn with this font have the same width.
            </summary>
        </member>
        <member name="P:Alternet.Common.IPainter.FontWidth">
            <summary>
            When implemented by a class, represents width of the font of the device context currently associated with the <c>IPainter</c>.
            </summary>
        </member>
        <member name="P:Alternet.Common.IPainter.FontHeight">
            <summary>
            When implemented by a class, represents height of the font of the device context currently associated with the <c>IPainter</c>.
            </summary>
        </member>
        <member name="P:Alternet.Common.IPainter.LineHeight">
            <summary>
            When implemented by a class, represents height of the individual lines.
            </summary>
        </member>
        <member name="P:Alternet.Common.IPainter.LineSpace">
            <summary>
            When implemented by a class, Represents additional height added to the height of the font.
            </summary>
        </member>
        <member name="P:Alternet.Common.IPainter.UseDrawText">
            <summary>
            When implemented by a class, indicates whether painter should use DrawText method rather then ExtTextOut to paint text.
            </summary>
        </member>
        <member name="M:Alternet.Common.IPainter.Clear">
            <summary>
            When implemented by a class, resets all <c>IPainter</c> properties to the initial state.
            </summary>
        </member>
        <member name="M:Alternet.Common.IPainter.StringWidth(System.String)">
            <summary>
            When implemented by a class, returns width of the given string.
            </summary>
            <param name="text">The text to calculate width.</param>
            <returns>Width of specified string.</returns>
        </member>
        <member name="M:Alternet.Common.IPainter.StringWidth(System.String,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, returns width of the specified part of the given string.
            </summary>
            <param name="text">The text to calculate width.</param>
            <param name="pos">Position of the first character to start calculating.</param>
            <param name="len">Length of the part of string to calculate width.</param>
            <returns>Width of the part of string.</returns>
        </member>
        <member name="M:Alternet.Common.IPainter.StringWidth(System.String,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            When implemented by a class, returns width of the given string fitting into the given Width.
            </summary>
            <param name="text">The text to calculate width.</param>
            <param name="width">Maximum layout area for the string.</param>
            <param name="count">Receives number of character fitting into specified Width.</param>
            <param name="exact">Specifies whether the calculating should be precise.</param>
            <returns>Width of the part of string.</returns>
        </member>
        <member name="M:Alternet.Common.IPainter.StringWidth(System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            When implemented by a class, returns width of the specified part of the given string fitting into the given Width.
            </summary>
            <param name="text">The text to calculate width.</param>
            <param name="pos">Position of the first character to start calculating.</param>
            <param name="len">Length of the part of string to calculate width.</param>
            <param name="width">Maximum layout area for the string.</param>
            <param name="count">Receives number of characters fitting into specified Width.</param>
            <returns>Width of the part of string.</returns>
        </member>
        <member name="M:Alternet.Common.IPainter.StringWidth(System.String,System.Int32,System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            When implemented by a class, returns width of the specified part of the given string fitting into the given Width.
            </summary>
            <param name="text">The text to calculate width.</param>
            <param name="pos">Position of the first character to start calculating.</param>
            <param name="len">Length of the part of string to calculate width.</param>
            <param name="width">Maximum layout area for the string.</param>
            <param name="count">Receives number of characters fitting into the into the specified Width.</param>
            <param name="exact">Specifies whether the calculating should be precise.</param>
            <returns>Width of the part of string.</returns>
        </member>
        <member name="M:Alternet.Common.IPainter.CharWidth(System.Char,System.Int32)">
            <summary>
            When implemented by a class, returns width of the given number of specified character.
            </summary>
            <param name="ch">Character to calculate width.</param>
            <param name="count">Number of characters.</param>
            <returns>Width of specified characters.</returns>
        </member>
        <member name="M:Alternet.Common.IPainter.CharWidth(System.Char,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            When implemented by a class, returns width of the such number of the specified characters fitting into the given Width.
            </summary>
            <param name="ch">Character to calculate width.</param>
            <param name="width">The width that should hold a number of the specified character.</param>
            <param name="count">Receive number of character that can fit into specified width.</param>
            <param name="exact">Specifies whether the calculating should be precise.</param>
            <returns>Width of specified characters.</returns>
        </member>
        <member name="M:Alternet.Common.IPainter.BeginPaint(System.Drawing.Graphics)">
            <summary>
            When implemented by a class, prepares the <c>IPainter</c> to paint. Associates new device context from given Graphics object to <c>IPainter</c> and preserves <c>IPainter</c> properties.
            <seealso cref="M:Alternet.Common.IPainter.EndPaint"/>
            </summary>
            <param name="graphics">The Graphics object to draw on.</param>
        </member>
        <member name="M:Alternet.Common.IPainter.EndPaint">
            <summary>
            When implemented by a class, marks the end of painting. Releases device context associated with this <c>IPainter</c> and restores saved <c>IPainter</c> properties.
            <seealso cref="M:Alternet.Common.IPainter.BeginPaint(System.Drawing.Graphics)"/>
            </summary>
        </member>
        <member name="M:Alternet.Common.IPainter.FillRectangle(System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, fills the given rectangle by using the current brush.
            </summary>
            <param name="rect">The rectangle object to fill.</param>
        </member>
        <member name="M:Alternet.Common.IPainter.FillRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, fills the given rectangular area by using the current brush.
            </summary>
            <param name="x">X-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">Y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
        </member>
        <member name="M:Alternet.Common.IPainter.FillRectangle(System.Drawing.Color,System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, fills the given rectangle by using specified color.
            </summary>
            <param name="color">Specified color to fill rectangle.</param>
            <param name="rect">The rectangle object to fill.</param>
        </member>
        <member name="M:Alternet.Common.IPainter.FillRectangle(System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, fills the given rectangle by using specified color.
            </summary>
            <param name="color">Specified color to fill rectangle.</param>
            <param name="x">X-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">Y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
        </member>
        <member name="M:Alternet.Common.IPainter.FillPolygon(System.Drawing.Color,System.Drawing.Point[])">
            <summary>
            When implemented by a class, fills the interior of a polygon defined by an array of points specified by Point structures.
            </summary>
            <param name="color">Specifies color to fill polygon.</param>
            <param name="points">Array of Point structures that represent the vertices of the polygon to fill.</param>
        </member>
        <member name="M:Alternet.Common.IPainter.FillGradient(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            When implemented by a class, fills the given rectangle with color that smoothly fades from one side to the other.
            </summary>
            <param name="rect">The rectangle object to fill.</param>
            <param name="beginColor">A Color structure that represents the starting color of the linear gradient.</param>
            <param name="endColor">A Color structure that represents the ending color of the linear gradient.</param>
            <param name="point1">A Point structure that represents the start point of the linear gradient.</param>
            <param name="point2">A Point structure that represents the end point of the linear gradient.</param>
        </member>
        <member name="M:Alternet.Common.IPainter.FillGradient(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            When implemented by a class, fills the given rectangle with color that smoothly fades from one side to the other.
            </summary>
            <param name="x">X-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">Y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
            <param name="beginColor">A Color structure that represents the starting color of the linear gradient.</param>
            <param name="endColor">A Color structure that represents the ending color of the linear gradient.</param>
            <param name="point1">A Point structure that represents the start point of the linear gradient.</param>
            <param name="point2">A Point structure that represents the end point of the linear gradient.</param>
        </member>
        <member name="M:Alternet.Common.IPainter.DrawThemeBackground(System.IntPtr,System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, draws the background image defined by the visual style for the specified control part.
            </summary>
            <param name="handle">Handle to a window's specified theme data.</param>
            <param name="partID">Specifies the part to draw.</param>
            <param name="stateID">Specifies the state of the part to draw.</param>
            <param name="rect">Specifies the rectangle, in logical coordinates, in which the background image is drawn.</param>
        </member>
        <member name="M:Alternet.Common.IPainter.DrawRectangle(System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, draws a border around the specified rectangle using current <c>BackColor</c>.
            </summary>
            <param name="rect">The rectangle object to draw border.</param>
        </member>
        <member name="M:Alternet.Common.IPainter.DrawFocusRect(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            When implemented by a class, draws a border around the specified rectangle using dot pattern.
            </summary>
            <param name="x">X-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">Y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
            <param name="color">Color of the frame.</param>
        </member>
        <member name="M:Alternet.Common.IPainter.DrawFocusRect(System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
            When implemented by a class, draws a border around the specified rectangle using current <c>BackColor</c>.
            </summary>
            <param name="rect">The rectangle object to draw border.</param>
            <param name="color">Color of the frame.</param>
        </member>
        <member name="M:Alternet.Common.IPainter.DrawRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, draws a border around the specified rectangle using dot pattern.
            </summary>
            <param name="x">X-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">Y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
        </member>
        <member name="M:Alternet.Common.IPainter.DrawRoundRectangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, draws a rectangle with rounded corners. The rectangle is outlined by using the current pen.
            </summary>
            <param name="left">Specifies the x-coordinate, in logical coordinates, of the upper-left corner of the rectangle.</param>
            <param name="top">Specifies the y-coordinate, in logical coordinates, of the upper-left corner of the rectangle.</param>
            <param name="right">Specifies the x-coordinate, in logical coordinates, of the lower-right corner of the rectangle.</param>
            <param name="bottom">Specifies the y-coordinate, in logical coordinates, of the lower-right corner of the rectangle.</param>
            <param name="width">Specifies the width, in logical coordinates, of the ellipse used to draw the rounded corners.</param>
            <param name="height">Specifies the height, in logical coordinates, of the ellipse used to draw the rounded corners.</param>
        </member>
        <member name="M:Alternet.Common.IPainter.FillRoundRectangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, fills a rectangle with rounded corners. The rectangle is outlined by using the current pen and filled by using the current brush.
            </summary>
            <param name="left">Specifies the x-coordinate, in logical coordinates, of the upper-left corner of the rectangle.</param>
            <param name="top">Specifies the y-coordinate, in logical coordinates, of the upper-left corner of the rectangle.</param>
            <param name="right">Specifies the x-coordinate, in logical coordinates, of the lower-right corner of the rectangle.</param>
            <param name="bottom">Specifies the y-coordinate, in logical coordinates, of the lower-right corner of the rectangle.</param>
            <param name="width">Specifies the width, in logical coordinates, of the ellipse used to draw the rounded corners.</param>
            <param name="height">Specifies the height, in logical coordinates, of the ellipse used to draw the rounded corners.</param>
        </member>
        <member name="M:Alternet.Common.IPainter.DrawLine(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, draws a line from the given start position up to, but not including, the specified end point.
            </summary>
            <param name="x1">X-coordinate of the line's start point.</param>
            <param name="y1">Y-coordinate of the line's start point.</param>
            <param name="x2">X-coordinate of the line's ending point.</param>
            <param name="y2">Y-coordinate of the line's ending point.</param>
        </member>
        <member name="M:Alternet.Common.IPainter.DrawLine(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Int32,System.Drawing.Drawing2D.DashStyle)">
            <summary>
            When implemented by a class, draws a line from the given start position up to, but not including, the specified end point.
            </summary>
            <param name="x1">X-coordinate of the line's start point.</param>
            <param name="y1">Y-coordinate of the line's start point.</param>
            <param name="x2">X-coordinate of the line's ending point.</param>
            <param name="y2">Y-coordinate of the line's ending point.</param>
            <param name="color">Specifies color of the Pen object to draw line.</param>
            <param name="width">Specifies width of the Pen object to draw line.</param>
            <param name="penStyle">Specifies style of the Pen object to draw line.</param>
        </member>
        <member name="M:Alternet.Common.IPainter.DrawDotLine(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            When implemented by a class, draws a dotted line from the given start position up to the specified end point.
            </summary>
            <param name="x1">X-coordinate of the line's start point.</param>
            <param name="y1">Y-coordinate of the line's start point.</param>
            <param name="x2">X-coordinate of the line's ending point.</param>
            <param name="y2">Y-coordinate of the line's ending point.</param>
            <param name="color1">Specifies line color.</param>
            <param name="color2">Specifies background color.</param>
            <param name="size">Specifies dot size</param>
        </member>
        <member name="M:Alternet.Common.IPainter.DrawWave(System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
            When implemented by a class, draws waved line in the specified rectangular area.
            </summary>
            <param name="rect">Rectangle that bounds the drawing area for the wave.</param>
            <param name="color">Color used to draw wave.</param>
        </member>
        <member name="M:Alternet.Common.IPainter.DrawImage(System.Windows.Forms.ImageList,System.Int32,System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, draws specified image in the specified rectangular area.
            </summary>
            <param name="images">Image list that contains image to draw.</param>
            <param name="index">Index of image to draw within image list.</param>
            <param name="rect">Rectangle that bounds the drawing area for the image.</param>
        </member>
        <member name="M:Alternet.Common.IPainter.DrawImage(System.Windows.Forms.ImageList,System.Int32,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)">
            <summary>
            When implemented by a class, draws specified image in the specified rectangular area.
            </summary>
            <param name="images">Image list that contains image to draw.</param>
            <param name="index">Index of image to draw within image list.</param>
            <param name="rect">Rectangle that bounds the drawing area for the image.</param>
            <param name="srcX">X-coordinate of the upper-left corner of the portion of the source image to be drawn.</param>
            <param name="srcY">Y-coordinate of the upper-left corner of the portion of the source image to be drawn.</param>
            <param name="srcWidth">Width of the portion of the source image to be drawn.</param>
            <param name="srcHeight">Width of the portion of the source image to be drawn.</param>
            <param name="srcUnit">Specifies the unit of measure for the image.</param>
            <param name="imageAttr">Specifies the color and size attributes of the image to be drawn.</param>
        </member>
        <member name="M:Alternet.Common.IPainter.StretchDrawImage(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Bitmap)">
            <summary>
            When implemented by a class, draws stretched image in the specified rectangular area.
            </summary>
            <param name="rect">Base rect</param>
            <param name="stretchRect">Stretch rect</param>
            <param name="imageRect">Image rect</param>
            <param name="image">Specifies image to draw.</param>
        </member>
        <member name="M:Alternet.Common.IPainter.DrawEdge(System.Drawing.Rectangle@,System.Windows.Forms.Border3DStyle,System.Windows.Forms.Border3DSide)">
            <summary>
            When implemented by a class, draws one or more edges of rectangle.
            </summary>
            <param name="rect">Specifies rectangle which edges should be drawn.</param>
            <param name="border">Specifies the style of a three-dimensional border.</param>
            <param name="sides">Specifies the sides of a rectangle to draw.</param>
        </member>
        <member name="M:Alternet.Common.IPainter.DrawEdge(System.Drawing.Rectangle@,System.Windows.Forms.Border3DStyle,System.Windows.Forms.Border3DSide,System.Int32)">
            <summary>
            When implemented by a class, draws one or more edges of rectangle.
            </summary>
            <param name="rect">Specifies rectangle which edges should be drawn.</param>
            <param name="border">Specifies the style of a three-dimensional border.</param>
            <param name="sides">Specifies the sides of a rectangle to draw.</param>
            <param name="flags">Additional flags (used for internal purposes).</param>
        </member>
        <member name="M:Alternet.Common.IPainter.DrawPolygon(System.Drawing.Point[],System.Drawing.Color)">
            <summary>
            When implemented by a class, draws a polygon defined by an array of Point structures.
            </summary>
            <param name="points">Array of Point structures that represent the vertices of the polygon.</param>
            <param name="color">Specifies color of the polygon.</param>
        </member>
        <member name="M:Alternet.Common.IPainter.TextOut(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, draws text in the specified location.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="len">Specifies the length of the string.</param>
            <param name="x">X-coordinate of the start text point.</param>
            <param name="y">Y-coordinate of the start text point.</param>
        </member>
        <member name="M:Alternet.Common.IPainter.TextOut(System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            When implemented by a class, draws text in the specified location.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="len">Specifies the length of the string.</param>
            <param name="x">X-coordinate of the start text point.</param>
            <param name="y">Y-coordinate of the start text point.</param>
            <param name="clipped">Specifies that text will be clipped to the rectangle.</param>
            <param name="opaque">Specifies that current background color should be used to fill the rectangle.</param>
        </member>
        <member name="M:Alternet.Common.IPainter.TextOut(System.String,System.Int32,System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, draws text within the specified rectangle.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="len">Specifies the length of the string.</param>
            <param name="rect">Specifies the dimensions, in logical coordinates, of a rectangle that is used for clipping, opaquing, or both.</param>
        </member>
        <member name="M:Alternet.Common.IPainter.TextOut(System.String,System.Int32,System.Drawing.Rectangle,System.Boolean,System.Boolean)">
            <summary>
            When implemented by a class, draws text within the specified rectangle.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="len">Specifies the length of the string.</param>
            <param name="rect">Specifies the dimensions, in logical coordinates, of a rectangle that is used for clipping, opaquing, or both.</param>
            <param name="clipped">Specifies that text will be clipped to the rectangle.</param>
            <param name="opaque">Specifies that current background color should be used to fill the rectangle.</param>
        </member>
        <member name="M:Alternet.Common.IPainter.TextOut(System.String,System.Int32,System.Drawing.Rectangle,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            When implemented by a class, draws text within the specified rectangle.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="len">Specifies the length of the string.</param>
            <param name="rect">Specifies the dimensions, in logical coordinates, of a rectangle that is used for clipping, opaquing, or both.</param>
            <param name="x">X-coordinate of the start text point.</param>
            <param name="y">Y-coordinate of the start text point.</param>
            <param name="clipped">Specifies that text will be clipped to the rectangle.</param>
            <param name="opaque">Specifies that current background color should be used to fill the rectangle.</param>
        </member>
        <member name="M:Alternet.Common.IPainter.TextOut(System.String,System.Int32,System.Drawing.Rectangle,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            When implemented by a class, draws text within the specified rectangle.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="len">Specifies the length of the string.</param>
            <param name="rect">Specifies the dimensions, in logical coordinates, of a rectangle that is used for clipping, opaquing, or both.</param>
            <param name="x">X-coordinate of the start text point.</param>
            <param name="y">Y-coordinate of the start text point.</param>
            <param name="clipped">Specifies that text will be clipped to the rectangle.</param>
            <param name="opaque">Specifies that current background color should be used to fill the rectangle.</param>
            <param name="space">Specifies distance between origins of adjacent character cells.</param>
        </member>
        <member name="M:Alternet.Common.IPainter.DrawText(System.String,System.Int32,System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, draws text in the specified rectangle using current values of <c>TextColor</c> and <c>BackColor</c>.
            </summary>
            <param name="text">The text to be draw.</param>
            <param name="len">Specifies the length of the string.</param>
            <param name="rect">The layout area for drawing text.</param>
        </member>
        <member name="M:Alternet.Common.IPainter.Transform(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            When implemented by a class, sets a two-dimensional linear transformation for the specified device context.
            </summary>
            <param name="x">Horizontal offset of the transformation.</param>
            <param name="y">Vertical offset of the transformation.</param>
            <param name="scaleX">Horizontal scale of the transformation.</param>
            <param name="scaleY">Vertical scale of the transformation.</param>
        </member>
        <member name="M:Alternet.Common.IPainter.EndTransform">
            <summary>
            When implemented by a class, sets default two-dimensional linear transformation for the specified device context.
            </summary>
        </member>
        <member name="M:Alternet.Common.IPainter.IntersectClipRect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, creates a new clipping region from the intersection of the current clipping region and the specified rectangle.
            </summary>
            <param name="x">X-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">Y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
        </member>
        <member name="M:Alternet.Common.IPainter.ExcludeClipRect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, creates a new clipping region that consists of the existing clipping region minus the specified rectangle.
            </summary>
            <param name="x">X-coordinate, of the upper-left corner of the rectangle.</param>
            <param name="y">Y-coordinate, of the upper-left corner of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
        </member>
        <member name="M:Alternet.Common.IPainter.IntersectClipRect(System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, creates a new clipping region from the intersection of the current clipping region and the specified rectangle.
            </summary>
            <param name="rect">Rectangle to intersect.</param>
        </member>
        <member name="M:Alternet.Common.IPainter.ExcludeClipRect(System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, creates a new clipping region that consists of the existing clipping region minus the specified rectangle.
            </summary>
            <param name="rect">Rectangle to exclude.</param>
        </member>
        <member name="M:Alternet.Common.IPainter.SaveClip(System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, retrieves handle to clipping region saved from specified rectangle.
            </summary>
            <param name="rect">Rectangle to process.</param>
            <returns>Handle to clipping region.</returns>
        </member>
        <member name="M:Alternet.Common.IPainter.RestoreClip(System.IntPtr)">
            <summary>
            When implemented by a class, restores current clipping region from previously saved region.
            </summary>
            <param name="rgn">Specifies handle to the previously saved clipping region.</param>
        </member>
        <member name="T:Alternet.Common.IRange">
            <summary>
            Represents an pair of two points that defines a scope in a two-dimensional plane.
            </summary>
        </member>
        <member name="P:Alternet.Common.IRange.StartPoint">
            <summary>
            When implemented by a class, gets or sets begin of <c>IRange</c> area.
            </summary>
        </member>
        <member name="P:Alternet.Common.IRange.EndPoint">
            <summary>
            When implemented by a class, gets or sets end of <c>IRange</c> area.
            </summary>
        </member>
        <member name="P:Alternet.Common.IRange.Size">
            <summary>
            When implemented by a class, gets or sets size of <c>IRange</c> area.
            </summary>
        </member>
        <member name="P:Alternet.Common.IRange.IsEmpty">
            <summary>
            When implemented by a class, gets boolean value indicating whether <c>IRange</c> has zero size.
            </summary>
        </member>
        <member name="M:Alternet.Common.IRange.Assign(Alternet.Common.IRange)">
            <summary>
            Copies contents from another <c>IRange</c> object.
            </summary>
        </member>
        <member name="T:Alternet.Common.IRangeList">
            <summary>
            Represents a sorted collection of <c>IRange</c> objects that can be individually accessed by index.
            </summary>
        </member>
        <member name="M:Alternet.Common.IRangeList.UpdatePosition(Alternet.Common.IRange,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, updates specified position by DeltaX and DeltaY values for specific <c>IRange</c>.
            </summary>
            <param name="range"><c>IRange</c> to update.</param>
            <param name="x">Index of current character in the text.</param>
            <param name="y">Index of current line in the text.</param>
            <param name="deltaX">Horizontal displacement.</param>
            <param name="deltaY">Vertical displacement.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="T:Alternet.Common.ISerializationInfo">
            <summary>
            Represents methods to serialize objects.
            </summary>
        </member>
        <member name="M:Alternet.Common.ISerializationInfo.Load">
            <summary>
            When implemented by a class, reads property values from external object. Reserved for internal use.
            </summary>
        </member>
        <member name="M:Alternet.Common.ISerializationInfo.FixupReferences(System.Object)">
            <summary>
            When implemented by a class, updates properties of external object with ones previously stored.
            </summary>
            <param name="owner">Specifies external object.</param>
        </member>
        <member name="T:Alternet.Common.ISortList`1">
            <summary>
            Represents a sorted collection of objects that can be individually accessed by index.
            </summary>
        </member>
        <member name="M:Alternet.Common.ISortList`1.FindExact(`0,System.Int32@,System.Collections.Generic.IComparer{`0})">
            <summary>
            When implemented by a class, finds the given object in the sorted list with assumption that sorted list do not have any duplicates.
            </summary>
            <param name="obj">Object to find.</param>
            <param name="index">Receive index of the found object in the sorted list.</param>
            <param name="comparer">Object that exposes a method to compare two objects.</param>
            <returns>True if the find succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.ISortList`1.FindFirst(`0,System.Int32@,System.Collections.Generic.IComparer{`0})">
            <summary>
            When implemented by a class, finds the first occurrence of the given object that satisfies searching criteria.
            </summary>
            <param name="obj">Object to find.</param>
            <param name="index">Receive index of the found object in the sorted list.</param>
            <param name="comparer">Object that exposes a method to compare two objects.</param>
            <returns>True if the find succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.ISortList`1.FindLast(`0,System.Int32@,System.Collections.Generic.IComparer{`0})">
            <summary>
            When implemented by a class, finds the last occurrence of the given object that satisfies searching criteria.
            </summary>
            <param name="obj">Object to find.</param>
            <param name="index">Receive index of the found object in the sorted list.</param>
            <param name="comparer">Object that exposes a method to compare two objects.</param>
            <returns>True if the find succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.ISortList`1.FindExact(System.Object,System.Int32@,System.Collections.IComparer)">
            <summary>
            When implemented by a class, finds the given object in the sorted list with assumption that sorted list do not have any duplicates.
            </summary>
            <param name="obj">Object to find.</param>
            <param name="index">Receive index of the found object in the sorted list.</param>
            <param name="comparer">Object that exposes a method to compare two objects.</param>
            <returns>True if the find succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.ISortList`1.FindFirst(System.Object,System.Int32@,System.Collections.IComparer)">
            <summary>
            When implemented by a class, finds the first occurrence of the given object that satisfies searching criteria.
            </summary>
            <param name="obj">Object to find.</param>
            <param name="index">Receive index of the found object in the sorted list.</param>
            <param name="comparer">Object that exposes a method to compare two objects.</param>
            <returns>True if the find succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.ISortList`1.FindLast(System.Object,System.Int32@,System.Collections.IComparer)">
            <summary>
            When implemented by a class, finds the last occurrence of the given object that satisfies searching criteria.
            </summary>
            <param name="obj">Object to find.</param>
            <param name="index">Receive index of the found object in the sorted list.</param>
            <param name="comparer">Object that exposes a method to compare two objects.</param>
            <returns>True if the find succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.ISortList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            When implemented by a class, sorts the elements in the entire sort list using the specified comparer.
            </summary>
            <param name="comparer">The IComparer implementation to use when comparing elements.</param>
        </member>
        <member name="M:Alternet.Common.ISortList`1.NeedSort(System.Collections.Generic.IComparer{`0})">
            <summary>
            When implemented by a class, determines if the list needs sorting based on given criteria.
            </summary>
            <param name="comparer">Comparer object to perform comparison between items in the list.</param>
            <returns>True if list has to be sorted; otherwise false.</returns>
        </member>
        <member name="T:Alternet.Common.ISortRange">
            <summary>
            Represents an container for a collection of <c>IRange</c>objects.
            </summary>
        </member>
        <member name="P:Alternet.Common.ISortRange.Range">
            <summary>
            When implemented by a class, represents current <c>IRange</c> object in the ranges list.
            </summary>
        </member>
        <member name="P:Alternet.Common.ISortRange.Ranges">
            <summary>
            When implemented by a class, represents collection of <c>IRange</c> objects stored in this range list.
            </summary>
        </member>
        <member name="P:Alternet.Common.ISortRange.Index">
            <summary>
            When implemented by a class, represents index of this <c>ISortRange</c> within the top level ranges collection.
            </summary>
        </member>
        <member name="M:Alternet.Common.ISortRange.Clear">
            <summary>
            When implemented by a class, clears <c>IRange</c> collection.
            </summary>
        </member>
        <member name="M:Alternet.Common.ISortRange.Contains(Alternet.Common.IRange)">
            <summary>
            When implemented by a class, indicates whether the range container contains a specific <c>IRange</c> entry.
            </summary>
            <param name="range">The <c>IRange</c> to locate in the range list.</param>
            <returns>True if <c>IRange</c> entry is found; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.ISortRange.Add(Alternet.Common.ISortRange)">
            <summary>
            When implemented by a class, adds specific <c>ISortRange</c> to range list.
            </summary>
            <param name="range"><c>ISortRange</c> to add.</param>
            <returns>The position into which the new range was added.</returns>
        </member>
        <member name="M:Alternet.Common.ISortRange.GetRanges(System.Collections.Generic.IList{Alternet.Common.IRange})">
            <summary>
            When implemented by a class, fills list specified by Ranges parameter with this <c>ISortRange</c>.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
        </member>
        <member name="M:Alternet.Common.ISortRange.BlockDeleting(System.Drawing.Rectangle,Alternet.Common.IRangeList,System.Collections.Generic.IComparer{Alternet.Common.IRange})">
            <summary>
            When implemented by a class, removes all ranges from specified region.
            </summary>
            <param name="rect">Specifies rectangle to remove ranges from.</param>
            <param name="list">List to update.</param>
            <param name="comparer">Object that exposes a method to compare two objects.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.Common.ISortRange.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32,Alternet.Common.IRangeList,System.Collections.Generic.IComparer{Alternet.Common.IRange})">
            <summary>
            When implemented by a class, updates specified position by DeltaX and DeltaY values for any ranges in the collection.
            </summary>
            <param name="x">Index of current character in the text.</param>
            <param name="y">Index of current line in the text.</param>
            <param name="deltaX">Horizontal displacement.</param>
            <param name="deltaY">Vertical displacement.</param>
            <param name="list">List to update.</param>
            <param name="comparer">Object that exposes a method to compare two objects.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="T:Alternet.Common.IUpdate">
            <summary>
            Represents properties and methods of updateable objects.
            </summary>
        </member>
        <member name="P:Alternet.Common.IUpdate.UpdateCount">
            <summary>
            When implemented by a class, keeps track of calls to <c>BeginUpdate</c> and <c>EndUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="M:Alternet.Common.IUpdate.BeginUpdate">
            <summary>
            When implemented by a class, prevents object state updating until calling <c>EndUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:Alternet.Common.IUpdate.EndUpdate">
            <summary>
            When implemented by a class, re-enables object state updating, that was turn of by calling <c>BeginUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:Alternet.Common.IUpdate.DisableUpdate">
            <summary>
            When implemented by a class, prevents object state updating until calling <c>EnableUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:Alternet.Common.IUpdate.EnableUpdate">
            <summary>
            When implemented by a class, re-enables object state updating, that was turn of by calling <c>DisableUpdate</c> method.
            Using DisableUpdate/EnableUpdate to prevent notifying about updating the object state.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:Alternet.Common.IUpdate.Update">
            <summary>
            When implemented by a class, updates an object state.
            </summary>
        </member>
        <member name="T:Alternet.Common.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Alternet.Common.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Alternet.Common.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
    </members>
</doc>
